;;
;; Clockwork Pendulum Standard Library
;;   stdlib.pn
;;
;; author:  James Hunt <james@niftylogic.com>
;; created: 2015-01-08
;;
anno "v20150119"

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; util.authdb.open
;;
fn util.authdb.open
    syslog debug "opening authentication databases"
    authdb.open
    jz +2
      perror "failed to open authentication databases"
      bail 1
    ret

fn util.authdb.save
    syslog debug "saving changes to authentication databases"
    authdb.save
    jz +2
      perror "failed to write changes to authentication databases"
      bail 1
    authdb.close
    ret

fn util.authdb.close
    syslog debug "closing authentication databases"
    authdb.close
    ret

fn util.runuser
    syslog debug "setting run-as user; looking up user %[a]s"
    user.find %a
    jz +2
      perror "failed to find user %[a]s"
      bail 1

    user.get "uid" %b
    syslog debug "found user %[a]s; GID = %[b]d"
    runas.uid %b
    ret

fn util.rungroup
    syslog debug "setting run-as group; looking up group %[a]s"
    group.find %a
    jz +2
      perror "failed to find group %[a]s"
      bail 1

    group.get "gid" %b
    syslog debug "found user %[a]s; GID = %[b]d"
    runas.gid %b
    ret

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; res.file.absent
;;
;;   %a = file to remove
;;
fn res.file.absent
    syslog info "%T: enforcing absence of %[a]s"
    fs.stat %a
    jz +1
    retv 0

    fs.type %a %b
    fs.file? %a
    jz rm

    fs.symlink? %a
    jz rm

    error "%[a]s already exists, as a %[b]s, and will not be automatically removed"
    bail 1

  rm:
    syslog notice "%T: removing %[b]s %[a]s"
    fs.unlink %a
    jz +2
      perror "failed to remove %[a]s"
      bail 1

    flag "changed"
    retv 0

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; res.dir.absent
;;
fn res.dir.absent
    syslog info "%T: enforcing absence of %[a]s"
    fs.stat %a
    jz +1
    retv 0

    fs.type %a %b
    fs.dir? %a
    jz rm

    fs.symlink? %a
    jz rm

    error "%[a]s already exists, as a %[b]s, and will not be automatically removed"
    bail 1

  rm:
    syslog notice "%T: removing %[b]s %[a]s"
    fs.symlink? %a
    jz +2 fs.rmdir %a   ; for dirs
          jmp done
          fs.unlink %a  ; for symlinks
    jz +2
      perror "failed to remove %[a]s"
      bail 1

  done:
    flag "changed"
    retv 0

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; res.dir.present
;;
;;   %a = directory to create
;;
fn res.dir.present
    syslog info "%T: enforcing presence of %[a]s"
    fs.stat %a
    jnz create

    fs.type %a %b
    fs.dir? %a
    jnz +2
      syslog info "%T: %[a]s already exists"
      retv 0

    fs.symlink? %a
    jz rm

    error "%[a]s already exists, as a %[b]s, and will not be automatically removed"
    bail 1

  rm:
    syslog notice "%T: removing pre-existing %[b]s %[a]s"
    fs.unlink %a
    jz create

    perror "failed to remove %[a]s"
    bail 1

  create:
    syslog notice "%T: creating directory %[a]s"
    fs.mkdir %a
    jz +2
      perror "failed to create directory %[a]s"
      bail 1

    flag "changed"
    retv 0

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; res.file.present
;;
fn res.file.present
    syslog info "%T: enforcing presence of %[a]s"
    fs.stat %a
    jnz create

    fs.type %a %b
    fs.file? %a
    jnz +2
      syslog info "%T: %[a]s already exists"
      retv 0

    fs.symlink? %a
    jz rm

    error "%[a]s already exists, as a %[b]s, and will not be automatically removed"
    bail 1

  rm:
    syslog notice "%T: removing pre-existing symbolic link %[a]s"
    fs.unlink %a
    jz create

    perror "failed to remove %[a]s"
    bail 1

  create:
    syslog notice "%T: creating new file %[a]s"
    fs.touch %a
    jz +2
      perror "failed to create regular file %[a]s"
      bail 1

    flag "changed"
    retv 0


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; res.file.chown
;;

fn res.file.chown
    syslog info "%T: enforcing user ownership of %[a]s"

    fs.uid %a %d
    jz +2
      perror "failed to determine ownership of %[a]s"
      bail 1

    authdb.open
    jz +2
      perror "failed to open authentication databases"
      bail 1

    syslog info "%T: looking for user named %[b]s"
    user.find %b
    jz +3
      error "failed to find user %[b]s"
      authdb.close
      bail 1

    user.get "uid" %c
    authdb.close
    eq %c %d jnz +1 retv 0

    syslog notice "%T: changing user ownership of %[a]s to %[b]s"
    fs.chown %a %c
    jz +2
      perror "failed to change user ownership of %[a]s to %[b]s"
      bail 1

    flag "changed"
    retv 0


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; res.file.chgrp
;;
;;   %a = file to change group ownership of
;;   %b = group name
;;
fn res.file.chgrp
    syslog info "%T: enforcing group ownership of %[a]s"

    fs.gid %a %d
    jz +2
      perror "failed to determine group-ownership of %[a]s"
      bail 1

    authdb.open
    jz +2
      perror "failed to open authentication databases"
      bail 1

    syslog info "%T: looking for group named %[b]s"
    group.find %b
    jz +3
      error "failed to find group %[b]s"
      authdb.close
      bail 1

    group.get "gid" %c
    authdb.close
    eq %c %d jnz +1 retv 0

    syslog notice "%T: changing group ownership of %[a]s to %[b]s"
    fs.chgrp %a %c
    jz +2
      perror "failed to change group ownership of %[a]s to %[b]s"
      bail 1

    flag "changed"
    retv 0


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; res.file.chmod
;;
fn res.file.chmod
    syslog info "%T: enforcing file permissions on %[a]s"
    fs.mode %a %c
    eq %c %b jnz +1 retv 0 ;; mode already good.  exit

    syslog notice "%T: changing file permissions of %[a]s to %[b]04o"
    fs.chmod %a %b
    jz +2
      perror "failed to set file permissions of %[a]s to %[b]04o"
      bail 1

    flag "changed"
    retv 0


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; res.file.contents
;;
fn res.file.contents
    ; %a is path
    ; %b is temp file (which may be equal to path)
    ; %c is resource key
    ; %d is verify command
    ; %e is expected return code of `%d`

    syslog info "%T: enforcing file contents of %[a]s"

    syslog info "%T: retrieving remote SHA1 checksum"
    remote.sha1 %c %o
    jz +2
      error "%T: failed to retrieve remote SHA1 checksum"
      bail 1

    syslog info "%T: calculating local SHA1 checksum"
    fs.sha1 %a %p
    jz +2
      perror "failed to calculate SHA1 for local copy of %[a]s"
      bail 1

    syslog info "%T: checking if local SHA1 (%[p]s) matches remote (%[o]s)"
    streq %o %p
    jnz +1
      ret

    syslog notice "%T: updating local content of %[a]s (%[p]s) from remote copy (%[o]s)"
    remote.file %c %b
    jz +2
      perror "failed to write to %[b]s"
      bail 1

    streq %a %b
    jnz +2
      flag "changed";; if path (%a) == tempfile (%b), nothing more to be done here
      ret

    ;; otherwise, we have to verify via %d and %e
    syslog info "%T: verifying new local copy via `%[d]s`"
    exec %d %m
    acc %m
    error "`%[d]s` exited %[m]i\n"
    syslog info "%T: pre-change verification check exited %[m]d (want %[e]d)"
    eq %m %e ;; actual return code == expected return code?
    jz +2
      error "pre-change verification check `%[d]s` failed; returned %[m]u (not %[e]u)\n"
      bail 1

    syslog info "%T: copying ownership of %[a]s -> %[b]s (verified)"
    fs.uid %a %p fs.chown %b %p
    fs.gid %a %p fs.chgrp %b %p

    syslog info "%T: copying mode of %[a]s -> %[b]s (verified)"
    fs.mode %a %p fs.chmod %b %p

    syslog info "%T: renaming %[b]s -> %[a]s (verified)"
    fs.rename %b %a
    jz +3
      perror "failed to rename %[b]s -> %[a]s"
      fs.unlink %b
      bail 1

    flag "changed"
    retv 0



fn res.symlink.absent
    syslog info "%T: enforcing absence of %[a]s"
    fs.stat %a
    jz +1
    retv 0

    fs.type %a %b
    fs.symlink? %a
    jz +2
      error "%[a]s exists, but is not a symbolic link (is a %[b]s)"
      bail 1

    syslog notice "%T: removing %[b]s %[a]s"
    fs.unlink %a
    jz +2
      perror "failed to remove %[a]s"
      bail 1

    flag "changed"
    retv 0

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; res.symlink.present
;;
;;   %a = symbolic link path
;;   %b = target path
;;
fn res.symlink.present
    set %c %b

    syslog info "%T: enforcing presence of %[a]s"
    fs.stat %a
    jnz create

    fs.type %a %c
    fs.symlink? %a
    jz +2
      error "%[a]s exists, but is not a symbolic link (is a %[c]s)"
      bail 1

    fs.readlink %a %e
    jz +2
      perror "failed to read target of symbolic link %[a]s"
      bail 1

    syslog info "%T: existing symbolic link %[a]s points to %[e]s"
    streq %b %e
    jnz +1
      retv 0

    syslog info "%T: symbolic link is incorrect; removing %[a]s"
    fs.unlink %a
    jz +2
      perror "failed to remove %[a]s"
      bail 1

  create:
    syslog notice "%T: creating symbolic link %[a]s -> %[b]s"
    fs.symlink %b %a

    flag "changed"
    retv 0

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; res.user.absent
;;
fn res.user.absent
    syslog info "%T: enforcing absence of %[a]s"
    user.find %a
    jz +1
      retv 0

    syslog notice "%T: removing user %[a]s"
    user.delete
    user.find %a
    jz +2
      flag "changed"
      retv 0

    error "failed to delete user %[a]s"
    bail 1

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; res.user.present
;;
;;   %a = username
;;   %b = uid
;;   %c = gid
;;   %d = home
;;   %e = shell
;;   %f = password
;;
fn res.user.present
    syslog info "%T: enforcing presence of %[a]s"
    user.find %a
    jz exists
      syslog notice "%T: provisioning new local user account for %[a]s"
      user.new
      flag "mkhome"
      flag "changed"
      user.set "username"  %a
      user.set "passwd"   "x"
      user.set "pwhash"   "*"
      user.set "pwmin"     0
      user.set "pwmax"     9999
      user.set "pwwarn"    7
      user.set "inact"     0
      user.set "expiry"    0
      user.set "changed"   98765

  exists:
    eq %b 65536 ;; max(UID) + 1
    jnz uid
      syslog notice "%T: auto-determining next available UID (> 1000) for %[a]s"
      authdb.nextuid 1000 %b
      jz uid
        perror "failed to lookup next available GID"
        bail 1

  uid:
    lt %b 65536
    jnz gid
      syslog info "%T: setting %[a]s UID to %[b]u"
      user.set "uid" %b
      flag "changed"

  gid:
    lt %c 65536
    jnz home
      syslog info "%T: setting %[a]s GID to %[c]u"
      user.set "gid" %c
      flag "changed"

  home:
    streq %d ""
    jz shell
      syslog info "%T: setting %[a]s home directory to %[d]s"
      user.set "home" %d
      flag "changed"

  shell:
    streq %e ""
    jz password
      syslog info "%T: setting %[a]s login shell to %[e]s"
      user.set "shell" %e
      flag "changed"

  password:
    streq %f ""
    jz done
      syslog info "%T: setting password hash for %[a]s"
      user.set "password" "x"
      user.set "pwhash" %f
      flag "changed"

  done:
    retv 0

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; res.group.absent
;;
fn res.group.absent
    syslog notice "%T: enforcing absence of %[a]s"
    group.find %a
    jz +1
      retv 0

    syslog notice "%T: removing group %[a]s"
    group.delete
    group.find %a
    jz +2
      flag "changed"
      retv 0

    error "failed to delete group %[a]s"
    bail 1

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; res.group.passwd
;;
;;   %a = group name
;;   %b = new password
;;
fn res.group.passwd
  group.find %a jz +2
    perror "failed to find group %[a]s"
    bail 1

  syslog notice "%T: setting password for group %[a]s"
  group.set "password" "*"
  group.set "pwhash"   %b
  jz +2
    error "failed to set group password for %[a]s"
    bail 1

  flag "changed"
  retv 0

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; res.user.mkhome
;;
;;   %a = home directory
;;   %b = skeleton
;;   %c = uid of owner
;;   %d = gid of owner
;;
fn res.user.mkhome
    syslog info "%T: enforcing presence of %[a]s home directory"
    fs.stat %a jnz create
    fs.dir? %a jnz +1
      retv 0
    fs.symlink? %a jnz +2
      fs.unlink %a
      jmp create

    fs.type %a %b
    error "%[a]s exists, but is not a symbolic link (is a %[b]s)"
    bail 1

  create:
    syslog info "%T: creating new home directory %[a]s"
    fs.mkdir %a
    jz +2
      perror "failed to create directory %[a]s"
      bail 1

   syslog info "%T: setting owner/group to %[c]u:%[d]u"
   fs.chown %a %c
   fs.chgrp %a %d
   syslog info "%T: setting mode to 0750"
   fs.chmod %a 0750

   streq %b "" jnz +1 retv 0
   fs.dir? %b jz +1 retv 0

   syslog info "%T: copying skeleton home directory from %[b]s"
   swap %a %b ;; copytree is (src -> dest)
   call util.copytree
   swap %b %a

   swap %b %c ; %b == UID
   swap %c %d ; %c == GID
   call util.chown.r
   retv 0

fn util.chown.r
    fs.opendir %a %p
    jz +2
      perror "failed to opendir(%[a]s)"
      retv 1
  again:
    fs.readdir %p %o
    jnz done
    string "%[a]s/%[o]s" %n
    fs.symlink? %n jz again

    syslog info "changing ownership of %[n]s to %[b]u:%[c]u"
    fs.chown %n %b
    fs.chgrp %n %c
    fs.dir? %n jnz again

    ;; recurse!
    swap %a %n
    call util.chown.r
    swap %n %a
    jmp again

  done:
    retv 0

fn util.copytree
    fs.opendir %a %p
    jz +2
      perror "failed to opendir(%[a]s)"
      retv 1
  again:
    fs.readdir %p %o
    jnz done
    string "%[a]s/%[o]s" %n
    string "%[b]s/%[o]s" %m
    syslog info "copying %[n]s -> %[m]s"

    fs.dir? %n
    jz dir

    fs.file? %n
    jz file

    fs.symlink? %n
    jz symlink

    jmp again ; unknown!

  dir:
    fs.mkdir %m
    fs.mode %n %l
    fs.chmod %m %l
    swap %a %n swap %b %m
    call util.copytree
    swap %a %n swap %b %m
    jmp again

  file:
    fs.copy %n %m
    fs.mode %n %l
    fs.chmod %m %l
    jmp again

  symlink:
    fs.readlink %n %l
    fs.symlink %l %m
    jmp again

  done:
    retv 0

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; res.group.present
;;
;;   %a = group name
;;   %b = gid
;;
fn res.group.present
    syslog info "%T: enforcing presence of %[a]s"
    group.find %a
    jz exists
      syslog notice "%T: provisioning new local group account for %[a]s"
      group.new
      flag "changed"
      group.set "name"    %a
      group.set "passwd" "x"
      group.set "pwhash" "*"

  exists:
    eq %b 65536 ;; max(GID) + 1
    jnz gid
      syslog notice "%T: auto-determining next available GID (> 1000) for %[a]s"
      authdb.nextgid 1000 %b
      jz gid
        perror "failed to lookup next available GID"
        bail 1

  gid:
    lt %b 65536
    jnz done
      syslog info "%T: setting %[a]s GID to %[b]s"
      group.set "gid" %b
      flag "changed"

  done:
    retv 0

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; res.package.absent
;;
;;   %a = package name
;;
fn res.package.absent
    syslog info "%T: enforcing absence of %[a]s"
    syslog info "%T: checking for currently installed version (if any)"
    localsys "pkg-version %[a]s" %p
    acc %d
    eq %d 1
    jnz +2  ;; return code 1 == not installed
      syslog info "%T: not installed"
      retv 0

    eq %d 0
    jz +2
      perror "failed to detect installed version of %[a]s"
      bail 1

    syslog notice "%T: uninstalling %[a]s"
    localsys "pkg-remove %[a]s" %p
    jz +2
      perror "failed to uninstall package %[a]s"
      bail 1

    flag "changed"
    retv 0

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; res.package.install
;;
;;   %a = package name
;;   %b = version, with the following caveats:
;;          ""       = install any version
;;          "latest" = install the most recent version
;;          "x.y.z"  = install a specific version
;;
fn res.package.install
    syslog info "%T: enforcing presence of %[a]s %[b]s"
    set %c ""
    localsys "pkg-version %[a]s" %c
    jnz +2
      syslog info "%T: package is installed, may need an update"
      jmp update

    acc %d
    eq %d 1
    jnz +2
      syslog info "%T: package is not installed yet"
      jmp install

    perror "failed to detect installed version of %[a]s"
    bail 1

  install:
    streq %b ""         jz install.latest
    streq %b "latest"   jz install.latest

    syslog notice "%T: installing %[a]s version %[b]s"
    localsys "pkg-install %[a]s %[b]s" %p
    jz +2
      perror "package installation failed"
      bail 1

    flag "changed"
    retv 0

  install.latest:
    syslog notice "%T: installing latest version of %[a]s"
    localsys "pkg-install %[a]s latest" %p
    jz +2
      perror "package installation failed"
      bail 1

    flag "changed"
    retv 0

  update:
    streq %b ""       jnz +1 retv 0
    streq %b "latest" jz update.latest

    syslog info "%T: checking if current version (%[c]s) matches desired version (%[b]s)"
    streq %b %c
    jnz +1
      retv 0

    syslog notice "%T: upgrading package %[a]s from v%[c]s to v%[b]s"
    localsys "pkg-install %[a]s %[b]s" %p
    jz +2
      perror "package update failed"
      bail 1

    flag "changed"
    retv 0

  update.latest:
    localsys "pkg-latest %[a]s" %p
    jz +2
      error "failed to determine latest version of %[a]s"
      bail 1

    syslog info "%T: checking if current version (%[c]s) matches latest version (%[p]s)"
    streq %c %p
    jnz +1 ret

    syslog notice "upgrading package %[a]s from version %[c]s to (latest) %[p]s"
    localsys "pkg-install %[a]s %[p]s" %p
    jz +2
      perror "package update failed"
      bail 1

    flag "changed"
    retv 0

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; res.service.enable
;;
;;   %a = service name
;;
fn res.service.enable
    syslog info "%T: enforcing that %[a]s is enabled"
    localsys "svc-boot-status %[a]s" %b
    jnz +1 ret

    syslog notice "%T: enabling service %[a]s to start at boot"
    localsys "svc-enable %[a]s" %b
    jz +2
      error "failed to enable service %[a]s to start at boot"
      bail 1
    flag "changed"
    retv 0

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; res.service.disable
;;
;;   %a = service name
;;
fn res.service.disable
    syslog info "%T: enforcing that %[a]s is disabled"
    localsys "svc-boot-status %[a]s" %b
    jz +1 ret

    syslog notice "%T: disabling service %[a]s"
    localsys "svc-disable %[a]s" %b
    jz +2
      error "failed to disable service %[a]s"
      bail 1

    flag "changed"
    retv 0

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; res.service.start
;;
;;   %a = service name
;;
fn res.service.start
    syslog info "%T: enforcing that %[a]s is running"
    localsys "svc-run-status %[a]s" %b
    jnz +1 ret

    syslog notice "%T: starting service %[a]s"
    localsys "svc-init %[a]s start" %b
    jz +2
      error "failed to start service %[a]s"
      bail 1

    flag "changed"
    retv 0

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; res.service.restart
;;
;;   %a = service name
;;
fn res.service.restart
    syslog info "%T: conditionally restarting %[a]s"
    localsys "svc-run-status %[a]s" %b
    jz restart

      syslog notice "%T: starting service %[a]s"
      localsys "svc-init %[a]s start" %b
      jz +2
        error "failed to start service %[a]s"
        bail 1

      flag "changed"
      retv 0

  restart:
      syslog notice "restarting service %[a]s"
      localsys "svc-init %[a]s restart" %b
      jz +2
        error "failed to restart service %[a]s"
        bail 1

      flag "changed"
      retv 0

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; res.service.reload
;;
;;   %a = service name
;;
fn res.service.reload
    syslog info "%T: reloading %[a]s"
    localsys "svc-run-status %[a]s" %b
    jz reload

      syslog notice "starting service %[a]s"
      localsys "svc-init %[a]s start" %b
      jnz +2
        flag "changed"
        retv 0

      error "failed to start service %[a]s"
      bail 1

  reload:
      syslog notice "reloading service %[a]s"
      localsys "svc-init %[a]s reload" %b
      jz +2
        error "failed to reload service %[a]s"
        bail 1

      flag "changed"
      retv 0

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; res.service.stop
;;
;;   %a = service name
;;
fn res.service.stop
    syslog info "%T: enforcing that %[a]s is stopped"
    localsys "svc-run-status %[a]s" %b
    jz +1 ret

    syslog notice "stopping service %[a]s"
    localsys "svc-init %[a]s stop" %b
    jz +2
      error "failed to stop service %[a]s"
      bail 1

    flag "changed"
    retv 0

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; res.host.absent
;;
;;   %a = address
;;   %b = hostname
;;
fn res.host.absent
    syslog info "%T: enforcing absence of hosts entry %[a]s/%[b]s"
    string "/files/etc/hosts/*[ipaddr = \"%[a]s\" and canonical = \"%[b]s\"]" %p
    augeas.find %p %o
    jz +1 retv 0
      augeas.remove %p
      jz +2
        augeas.perror "failed to remove host record for %[a]s/%[b]s"
        bail 1

    flag "changed"
    retv 0

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; res.host.present
;;
;;   %a = address
;;   %b = hostname
;;
fn res.host.present
    syslog info "%T: enforcing presence of hosts entry %[a]s/%[b]s"
    string "/files/etc/hosts/*[ipaddr = \"%[a]s\" and canonical = \"%[b]s\"]" %p
    augeas.find %p %o
    jnz +1 ret

    syslog notice "%T: creating new hosts entry for %[a]s/%[b]s"
    augeas.set "/files/etc/hosts/9999/ipaddr" %a
    jz +2
      augeas.perror "failed to create new host record for %[a]s/%[b]s"
      bail 1

    augeas.set "/files/etc/hosts/9999/canonical" %b
    jz +2
      augeas.perror "failed to create new host record for %[a]s/%[b]s"
      bail 1

    flag "changed"
    retv 0

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; res.host.clear-aliases
;;
;;   %a = address
;;   %b = hostname
;;
fn res.host.clear-aliases
    syslog info "%T: clearing previous host aliases"
    string "/files/etc/hosts/*[ipaddr = \"%[a]s\" and canonical = \"%[b]s\"]" %p
    augeas.find %p %o

    jz +2
      augeas.perror "failed to find host record %[a]s/%[b]s"
      bail 1

    string "%[o]s/alias" %n
    augeas.remove %n
    jz +2
      augeas.perror "failed to clear host aliases for %[a]s/%[b]s"
      bail 1

    flag "changed"
    retv 0

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; res.host.add-alias
;;
;;   %a = address
;;   %b = hostname
;;   %c = index (for augeas, starts at 0)
;;   %d = alias name
;;
fn res.host.add-alias
    syslog notice "%T: adding host alias %[d]s to %[a]s/%[b]s"
    string "/files/etc/hosts/*[ipaddr = \"%[a]s\" and canonical = \"%[b]s\"]" %p
    augeas.find %p %o jz +2
      augeas.perror "failed to find host record %[a]s/%[b]s"
      bail 1

    string "%[o]s/alias[%[c]u]" %n
    augeas.set %n %d jz +2
      augeas.perror "failed to add alias '%[d]s' (at index %[c]u) to host record %[a]s/%[b]s"
      bail 1

    flag "changed"
    retv 0

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; res.group.member
;;
;;   %a = group name
;;   %b = add/remove (1 = add, 0 = remove)
;;   %c = type (member / admin)
;;   %d = user name
;;
fn res.group.member
    syslog info "%T: enforcing group %[c]sship for %[d]s in group %[a]s"
    group.find %a jz +2
      perror "%T: failed to find group %[a]s"
      bail 1

    group.has? %c %d jz exists
  ;; see if we should add the user
    eq %b 1 jz +1 retv 0
    syslog info "%T: adding %[a]s to group '%[d]s' as a(n) %[c]s"
    group.join %c %d
    jz +2
      perror "%T: failed to add %[a]s to group '%[d]s' as a(n) %[c]s"
      bail 1
    flag "changed"
    retv 0

  exists: ;; see if we should remove the user
    eq %b 0 jz +1 retv 0
    syslog info "%T: removing %[a]s from group '%[d]s' (as a(n) %[c]s)"
    group.kick %c %d
    jz +2
      perror "%T: failed to remove %[a]s from group '%[d]s' (as a(n) %[c]s)"
      bail 1
    flag "changed"
    retv 0

;; vim:et:ts=5:sw=4

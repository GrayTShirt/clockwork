;;
;; Clockwork Pendulum Standard Library
;;   stdlib/files.pn
;;   File Resource Functionality
;;
;;  author:  James Hunt <james@niftylogic.com>
;;  created: 2015-01-08
;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; res.file.absent
;;
fn res.file.absent
    fs.stat %a
    jz +1
    retv 0

    fs.file? %a
    jz rm

    fs.symlink? %a
    jz rm

    error "%[a]s exists, but is not a regular file"
    bail

  rm:
    fs.unlink %a
    jnz +2
    retv 0

    perror "failed to remove %[a]s"
    bail


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; res.file.present
;;
fn res.file.present
    fs.stat %a
    jnz create

    fs.symlink? %a
    jz remove

    error "%[a]s exists, but is not a regular file"
    bail

  remove:
    fs.unlink %a
    jz create

    perror "failed to replace %[a]s with a regular file"
    bail

  create:
    fs.touch %a
    jnz +2
    mark
    retv 0

    perror "failed to create regular file %[a]s"
    bail


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; res.file.chown
;;

fn res.file.chown
    authdb.open
    jz +2
        perror "failed to open authdb"
        bail

    user.find %b
    user.get "uid" %c
    jz +3
        error "failed to find user %[b]s"
        authdb.close
        bail

    authdb.close
    fs.chown %a %c
    jz +2
        perror "failed to change ownership of %[a]s to %[b]s"
        bail

    mark
    retv 0


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; res.file.chgrp
;;
fn res.file.chgrp
    authdb.open
    jz +2
        perror "failed to open authdb"
        bail

    group.find %b
    group.get "gid" %c
    jz +3
        error "failed to find group %[b]s"
        authdb.close
        bail

    authdb.close
    fs.chgrp %a %c
    jz +2
        perror "failed to change group ownership of %[a]s to %[b]s"
        bail

    mark
    retv 0


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; res.file.chmod
;;
fn res.file.chmod
    fs.chmod %a %b
    jz +2
        perror "failed to set mode of %[a]s to %[b]04o"
        bail

    mark
    retv 0


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; res.file.diff
;;
fn res.file.diff
    ; %a is path
    ; %b is remote sha1

    fs.sha1 %a %p
    jz +2
    perror "failed to calculate SHA1 for local copy of %[a]s"
    bail

    streq %b %p
    ret

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; res.file.update
;;
fn res.file.update
    ; %a is path
    ; %b is remote sha1
    ; %c is cached/not

    getfile %b %a
    jnz +1
    ret

    error "failed to update contents of %[a]s"
    bail


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; res.file.verify
;;
fn res.file.verify
    ; %a is temp path
    ; %b is real path
    ; %c is verify command
    ; %d is expected rc

    push %b
    push %a

    set %a 0 ; run as user root
    set %b 0 ; run as group root

    exec %c %e
    eq %d %e
    jz +1
    ret

    pop %a
    pop %b
    fs.rename %a %b
    jnz +1
    retv 0

    fs.unlink %a
    perror "failed to rename %[a]s to %[b]s"
    bail

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; res.file.contents
;;
fn res.file.contents
    ; %a is path
    ; %b is remote sha1
    ; %c is cached/not
    ; %d is verify/not
    ; %e is verify command
    ; %f is expected rc
    ; %g is tempfile

    call res.file.diff
    jnz +1
    ret

    ;; files differ
    eq %d 1                   ; should we use %g (tempfile)
    jnz update                ; in place of %a (real path)?

    swap %g %a                ; yes.  update the contents of
                              ; the tempfile first, so we can
                              ; run the verify (%e) command

  update:
    call res.file.update      ; no need to check return value
                              ; res.file.update will bail if
                              ; there were any problems

    eq %d 1                   ; run the verification?
    jz verify
    mark
    ret

  verify:
    set %b %g                 ; real path
    set %c %e                 ; verify command
    set %d %f                 ; expected rc

    call res.file.verify      ; no need to check return value
                              ; res.file.verify will bail if
                              ; there are any problems
    mark
    retv 0


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; res.symlink.ensure
;;
fn res.symlink.ensure
    fs.stat %a
    jnz create

    fs.symlink? %a
    jz +2
        error "%[a]s exists, but is not a symbolic link\n"
        bail

    fs.readlink %a %e
    jz +2
        perror "failed to read target of symbolic link %[a]s"
        bail

    streq %b %e
    jnz +1
        retv 0

    fs.unlink
    jz +2
        perror "failed to remove %[a]s"
        bail

  create:
    fs.symlink %a %b
    ret

;; vim:et:ts=4:sw=4

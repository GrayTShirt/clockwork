.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "RES_SERVICE 5"
.TH RES_SERVICE 5 "2014-09-15" "Clockwork v2.3.0" "Clockwork Manual"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
res_service \- Clockwork Resource Type for system init services
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The service resource manages system services, normally found in
/etc/init.d.  It can be used to restart or reload services in
response to other system configuration changes through explicit
dependencies.  It can also be used to enable or disable specific
services on boot.
.PP
To manage boot-time services, Clockwork relies on the native service
management tools like chkconfig.  The following tools are currently
supported:
.IP "\fBinvoke\-rc.d\fR" 4
.IX Item "invoke-rc.d"
For Debian and Ubuntu
.IP "\fBchkconfig\fR" 4
.IX Item "chkconfig"
For RedHat / CentOS
.SH "ATTRIBUTES"
.IX Header "ATTRIBUTES"
.IP "\fBname\fR" 4
.IX Item "name"
.PD 0
.IP "\fBservice\fR" 4
.IX Item "service"
.PD
The name of the service, derived from its init script name in
/etc/init.d.
.IP "\fBrunning\fR" 4
.IX Item "running"
.PD 0
.IP "\fBstopped\fR" 4
.IX Item "stopped"
.PD
Whether or not the service should be alive and running.  Valid
values are \*(L"yes\*(R" and \*(L"no\*(R".  There is no default value; if not
specified, Clockwork will not inspect the running state of the
service.
.Sp
Which attribute you use is a matter of personal preference.
.Sp
\&\fBrunning = \*(L"yes\*(R"\fR has the same meaning as \fBstopped = \*(L"no\*(R"\fR
.Sp
\&\fBrunning = \*(L"no\*(R"\fR has the same meaning as \fBstopped = \*(L"yes\*(R"\fR
.IP "\fBenabled\fR" 4
.IX Item "enabled"
.PD 0
.IP "\fBdisabled\fR" 4
.IX Item "disabled"
.PD
Whether or not the service should be started at boot.  Valid
values are \*(L"yes\*(R" and \*(L"no\*(R".  There is no default value; if not
specified, Clockwork will not inspect the boot-state of the
service.
.Sp
Which attribute you use is a matter of personal preference.
.Sp
\&\fBenabled = \*(L"yes\*(R"\fR has the same meaning as \fBdisabled = \*(L"no\*(R"\fR
.Sp
\&\fBenabled = \*(L"no\*(R"\fR has the same meaning as \fBdisabled = \*(L"yes\*(R"\fR
.SH "EXAMPLES"
.IX Header "EXAMPLES"
.SS "Starting and Enabling Services"
.IX Subsection "Starting and Enabling Services"
To ensure that \s-1SSH\s0 is running, and that it will automatically
start when the system boots:
.PP
.Vb 4
\&    service "sshd" {
\&        running: "yes"
\&        enabled: "yes"
\&    }
.Ve
.PP
If you are of a pessimistic persuasion, you can use double negatives
to accomplish the same thing:
.PP
.Vb 4
\&    service "sshd" {
\&        stopped:  "no"
\&        disabled: "no"
\&    }
.Ve
.SS "Stopping and Disabling Services"
.IX Subsection "Stopping and Disabling Services"
To ensure that avahi never runs, ever:
.PP
.Vb 4
\&    service "avahi\-daemon" {
\&        running:  "no"
\&        disabled: "yes"
\&    }
.Ve
.SH "CAVEATS"
.IX Header "CAVEATS"
.SS "1. Default Behavior"
.IX Subsection "1. Default Behavior"
By default, Clockwork does nothing with services unless you tell
it what to do.  For example, this policy snippet is useless:
.PP
.Vb 1
\&    service "apache" { }
.Ve
.SH "DEPENDENCIES"
.IX Header "DEPENDENCIES"
The service resource does not create implicit dependencies, but
you can leverage explicit dependencies to reload services when their
configuration changes.
.PP
For example, to restart syslog-ng when its global configuration file
changes:
.PP
.Vb 3
\&    file "/etc/syslog\-ng.conf" {
\&        # configuration omitted for clarity
\&    }
\&
\&    service "syslog\-ng" {
\&        running: "yes"
\&        enabled: "yes"
\&    }
\&
\&    service("syslog\-ng") depends on file("/etc/syslog\-ng.conf")
.Ve
.PP
Now, the \fIsyslog-ng\fR service will be reloaded if Clockwork has
to do anything to the \fI/etc/syslog\-ng.conf\fR file.
.SH "AUTHOR"
.IX Header "AUTHOR"
Clockwork was designed and written by James Hunt.

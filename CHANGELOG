
origin/master

  (none)



3.2.0        2015-04-19                                    runtime 20150209

  [ENHANCEMENTS]

  - New sys.policy.* facts
    When generating manifest configuration for a given host, clockd now
    tracks what policies have been enforced or extended.  This information
    is made available to the manifest language via special facts under the
    sys.policy namespace, and can be used in conditionals.

  [DOCUMENTATION]

  - Fix incorrect references to the old `fact' utility, instead of the newer
    `cw-fact' program.

  [BUG FIXES]

  - Properly free memory when running `cogd -X', which was causing memory
    tests to fail.

  - Handle files with NULL bytes in them
    Instead of using `pdu_extendf` and only getting partial BLOCK PDUs,
    use `pdu_extend` and fwrite to get the full block.  Fixes corruption
    found when trying to enforce presence of PNG images and other bin files.

  - Fix memory leaks when dependency injection failes
    If `policy_add_dependency()` fails (usually because of duplicate deps),
    memory was leaking in the unused dependency structure.  Fixed.



3.1.1        2015-03-14                                    runtime 20150209

  [ENHANCEMENTS]

  - Don't Create Empty Files
    If res.file.present has to create a file because it doesn't exist, but
    then fails to contact clockd for the remote SHA1 / file contents, that
    file should be removed.  Otherwise, we are left with extant files with
    nothing in them, which can confuse some 'conf.d' style code.

  [DOCUMENTATION]

  - Clarify the effects of composing `ondemand' and `test' in res_exec
    It may not do what you think it will.



3.1.0        2015-03-11                                    runtime 20150209

  [ENHANCEMENTS]

  - Rework Mesh Signalling Protocol
    `meshd' now operates solely as a proxy/router for proxying commands from
    clients to interested `cogd' agents, and routing replies back.  As such,
    timeouts have been moved into clients like `cw-mesh', and the protocol
    has been redesigned to provide faster convergence on subset responses.

    `cw-client' now has two timeouts, a discovery timeout (in milliseconds)
    that represents a minimum amount of time the client will wait for nodes
    to opt-in, and a proper timeout for waiting on client execution.

    Additionally, the ACL check on `cogd' nodes now comes before the
    filtering step, to avoid accidental disclosure of node information.

    The new (3.1) mesh protocol is documented in the MESH file.


  [DOCUMENTATION]

  - Fix incorrect flag examples in `cw-cert' usage screen.



3.0.17       2015-03-06                                    runtime 20150209

  [BUG FIXES]

  - Fix bad offset in user remediation
    Clockwork will no longer indiscriminately create directories named after
    users in its working directory.



3.0.16       2015-03-02                                    runtime 20150209

  [ENHANCEMENTS]

  - Support DNS resolution in cogd and cw-mesh configuration

  [BUG FIXES]

  - Fix memory leak in cogd process
    Not properly freeing the facts hash.  While we freed the values
    *in* the hash, the hash itself was being leaked.  Also, fixed some
    incidental (but constant) leaks related to startup overhead.

  - Fix memory leaks in clockd process:
    1) Free generated code after sending it to clients via PDU
    2) Free the config_file option value (not critical)
    3) Free label values after the ASM parse tree is no longer needed.
    4) Free a temporary string used in res_user_gencode (for $HOME)

  - Catch unhandled (but known) options in clockd's option processing.
    Now we get a warning and an exit 1, just like with cogd, cw-mesh, etc.

  [DOCUMENTATION]

  - Fix references to clockd(1) to read clockd(8)



3.0.15       2015-02-24                                    runtime 20150209

  [BUG FIXES]

  - Fix segfaults in sha1_*() argument ordering problems
    (libvigor-1.2.3+ fixed up the SHA1 calls to match convention)



3.0.14       2015-02-22                                    runtime 20150209

  [CLEANUP]

  - Move SHA1 implementation into libvigor 1.2.2+



3.0.13       2015-02-17                                    runtime 20150209

  [BUG FIXES]

  - Fix log level of res.group.absent "enforcing" message.

  - Fix debian/control dependencies on libvigor

  - Fix bug in authdb that was improperly setting /etc/* file modes
    If you were using Clockwork to manage users prior to 3.0.13, you'll
    definitely want to set up file resources to set the permissions back
    to more secure values (like 0600 for /etc/shadow and /etc/gshadow)

  - Fix pathing issue in time gatherer, to play nicely with mesh



3.0.12       2015-02-10                                    runtime 20150209

  [ENHANCEMENTS]

  - Multiline output of mesh commands is now supported.



3.0.11       2015-02-09                                    runtime 20150209

  [ENHANCEMENTS]

  - New Mesh commands for retrieving fact info

    `show facts` lets remote administrators retrieve full lists of all
    facts defined on hosts. Additionally `show fact <fact>` will target
    that list, and return only the specific fact value for the remote
    hosts.

  - New `system` opcode for executinging commands and redirecting all of
    standard output to the pendulum VMs configured stdout stream.  Standard
    error is ignored.



3.0.10       2015-02-04                                    runtime 20150202

  [ENHANCEMENTS]

  - New Mesh commands for managing packages and services

    `package <name> <action> [version]` lets remote administrators manage
    and query the installed system packages.  Additionally, `package
    recache` will rebuild the package cache (i.e. apt-get update, or yum
    clean all).

    `service <name> <action>` deals with service run/boot status.



3.0.9        2015-02-02                                    runtime 20150202

  [ENHANCEMENTS]

  - New `sha1` opcode
    Useful for generating checksums of in-memory strings (like file names)

  - Modify `property` opcode to return pragma values
    If a property with the desired name isn't found, we should return the
    named pragma's value.  This lets us use pragmas as globals vars (without
    scope).  It also lets us move more functionality into stdlib.pn

  - Offline/Cache Mode
    cogd now supports cache/offline mode.  If a previous CFM run was
    successfull, the Pendulum bytecode image that represents the policy will
    be cached.  Subsequent runs that fail to connect to a clockd master can
    then fallback on this cached policy for local enforcement of the "last
    known good state"

  - Local File Caching support
    If files are marked 'cache: yes' in their resource definitions, cogd
    will keep the desired contents in a local cache directory, so that a
    future run can still enforce system state even when disconnected from a
    clockd policy master daemon.



3.0.8        2015-02-01                                    runtime 20150201

  [ENHANCMENTS]

  - New `augeas.exists?` opcode
    Like the 20150119 opcode `augeas.find`, except that it has no output
    parameter and therefore does no heap-allocation.

  - Introduce proper JSON and XML/CDATA escaping in mesh output routines



3.0.7        2015-02-01                                    runtime 20150131

  [ENHANCEMENTS]

  - Set a umask in cogd
    cogd now sets a more sane umask, which can be specified via a new
    configuration directive, 'umask'.  Defaults to 0022.

  - pn --output flag
    The pn utility, in assembler (-S) mode, now supports -o / --output
    for specifying where to write the pendulum bytecode image.  This allows
    callers to short-circuit the auto-naming ("just add .S") logic, and was
    needed to support VPATH builds in automake.

  - New clockwork.* facts
    The new clockwork.version, clockwork.runtime and clockwork.protocol
    facts can be used to query for version (x.y.z), runtime (YYYYMMDD) and
    network protocol version (N) in play.

  - New `runtime` opcode for determining version of Pendulum runtime
    The runtime version will be set to date of finalization of new
    instruction set prior to release.  This means the each runtime version
    is a fixed specification of interface (but not necessarily behavior),
    and pendulum code can use this new opcode to determine if the runtime is
    new enough before using new opcodes.

  - New `fs.mkparent` opcode
    Intelligently creates missing parent directories of its first argument,
    using the ownership and mode of the closest existing ancestor directory.
    This emulates pre-3.0 Clockwork behavior that was missed during the
    conversion to the register machine implementation.

  - Better error / output handling from `localsys` in stdlib.pn

  [BUG FIXES]

  - Memory leaks plugged
    cogd no longer leaks the bytecode image it received from clockd (big).
    SHA1.FAIL PDUs are no longer leaked by `remote.sha1` opcode.
    SHA1 checksums are no longer leaked by `remote.sha1` opcode.

  - Fix some vim pnasm highlighting issues

  - Remove superfluous debugging from stdlib.pn



3.0.6        2015-01-30                                    runtime 20150119

  [BUG FIXES]

  - Fix misfiring notifies for dependency forward tracking.
    Now, if a service depends on a config file, changing the config file
    will cause cogd to properly reload/restart the dependent service.

  - Properly set "changed" (lastchg) attribute on new users
    Without it, new users are required to change their passwords immediately
    upon login.



3.0.5        2015-01-29                                    runtime 20150119

  [BUG FIXES]

  - Fix an issue in stdlib.pn's res.file.contents function, whereby file
    resources that come with verification steps (as /etc/sudoers often do)
    don't transfer mode or ownership (UID/GID) to the temporary file before
    renaming it over the top of the original file.  This causes havoc on
    files like /etc/sudoers, which *must* have specific permissions.

  - Fix typo (retrieve not 'retreive') in diagnostic message for remote.file.



3.0.4        2015-01-28                                    runtime 20150119

  [BUG FIXES]

  - cogd now honors `timeout` when waiting for responses from clockd
    masters, during remediation.  This fixes several stall-out conditions
    where the clockd master goes away mid-run, and the cogd process hangs
    waiting for a response that will never come.



3.0.3        2015-01-27                                    runtime 20150119

  [ENHANCEMENTS]

  - SIGHUP-to-reload Support for cogd
    cogd supports use of `kill -HUP $pid` to cause it to reload
    configuration while running.

  - SIGHUP-to-reload Support for clockd
    clockd supports use of `kill -HUP $pid` to cause it to reload
    configuration and parse a new policy manifest while running.
    Intelligently handles client connections for in-flight remediation.



3.0.2        2015-01-22                                    runtime 20150119

  [ENHANCEMENTS]

  - Support '-%>' for newline suppression in ERB templates
    Any ERB ruby snippet ending with '-%>' (instead of just '%>'), will
    ignore trailing whitespace.

  [BUG FIXES]

  - Fix truncation of `cw mesh` result output at 8-characters
    The full output will now be shown, in all output formats.

  - Fix calls to util.group.member to res.group.member
    Prevents internal fatals on clockd leading to assertion bails.



3.0.1         2015-01-21                                    runtime 20150119

  [ENHANCEMENTS]

  - `pn` Command-line argument to change include path
    The pn utility now takes zero or more `-I /path/to/include` arguments, à
    la gcc/clang/other compilers.

  - Better Template / Source file Error Reporting
    clockd now propagates error messages encountered during a [SHA1] PDU
    exchange to cogd, so that they can be displayed in the logs on the
    affected host, or to the terminal of a manual run.

  - Guard against function redefinition
    It is now a fatal error to redefine a function (fn) block in Pendulum.
    This, combined with a new function lookup algorithm, eliminates a
    loophole allowing stdlib functions to be overridden by callers.

  - Mesh Standard Library
    The guts of mesh command implementation now exist in mesh.pn, a Pendulum
    module.  Mesh commands do minimal argument parsing / validation and then
    call into this library, easing maintenance and enabling experimentation.

  - Skip Disassembly / Coverage of ignore modules
    When pcov generates a report, it will now skip the disassembly output
    for all modules it is ignoring code coverage calculations for.

  [BUG FIXES]

  - Fix handling of automatic user and group ID numbers
    A mismatch between the definition of res.user.present and
    res.group.present in stdlib, and the C res_*_gencode() functions caused
    users and groups without hard-set UID/GID values to become UID/GID 0.

  - Fix handling of res_exec 'test' guards
    Due to a logical error in the standard library, the semantics of exec
    resources with 'test' guards (commands that inhibit the execution of the
    exec resource if they don't return 0) was flipped.

  - Implement missing group membership / administrator remediation

  - Fix memory leaks in #include handling, and the `localsys` opcode



3.0.0         2015-01-20                                    runtime 20150119

  [ENHANCEMENTS]

  - Pendulum 2.0 register machine implementation
    Supports function calling, lightweight exception handling and
    module inclusion via `#include x` preprocessor directives.

    Bytecode implementation reduces parsing overhead on cogd-side,
    which is a boon in large mesh configurations.

  - Analysis tools for Pendulum bytecode
    Includes full-fidelity (source recoverable) disassembler (`pn -d`) and a
    code coverage analyzer (`pn --cover` to generate .pconv database and
    `pcov` to format it nice-like).

  - Pendulum 2.0 Standard Library
    stdlib.pn is a standard library of re-usable (and tested) routines for
    system configuration remediation.

  - New authdb implementation
    Replaces bulky and difficult-to-use userdb API, unifying the
    concepts of passwd/spent entries (into user_t) and group/sgent
    (into group_t).

  - More reliance on libvigor for the Missing Bits of C
    cw_arr* functions are gone, because we have strings_* from libvigor.
    Some manual string pointer voodoo replaced by string() and friends.



2.3.0     2014-09-11

  [ENHANCEMENTS]

  - New `cw' multi-call binary to replace cw* tools into a single,
    user-extensible sub-command dispather, a la git.

    The following utilities have therefore been renamed:

       cwcc     ->  cw-cc
       fact     ->  cw-fact
       cwtrust  ->  cw-trust
       cwpol    ->  cw-shell
       cwkey    ->  cw-cert
       cw-run   ->  cw-mesh (and cw-show, cw-ping, etc.)

       cwtool   ->  cw-localsys [internal to cogd]

  - cw-mesh prompting is now done to stderr, for pipelines
  - cw-mesh now ignores nodes that optout by default
    (use --optout to retain the legacy behavior)

  [BUG FIXES]

  - cw-mesh now honors ~/.cwrc as an adjunct to /etc/clockwork/cw.conf

# vim:tw=76:et

#!/bin/bash
#
# policyd	Starts and stops the Clockwork Policy Master
#
# chkconfig: 2345 55 25
# description: Clockwork is a configuration management system. \
#              This service starts up the Clockwork Policy Master, \
#              which is responsible for handing out policy to agents.
#
# processname: policyd
# config: /etc/clockwork/policyd.conf
# pidfile: /var/run/clockwork/policyd.pid
#
# Return values according to LSB for all commands but status:
# 0 - success
# 1 - generic or unspecified error
# 2 - invalid or excess argument(s)
# 3 - unimplemented feature (e.g. "reload")
# 4 - insufficient privilege
# 5 - program is not installed
# 6 - program is not configured
# 7 - program is not running
#

# source function library
. /etc/rc.d/init.d/functions

# pull in sysconfig settings
[ -f /etc/sysconfig/policyd ] && . /etc/sysconfig/policyd

RETVAL=0
prog="policyd"
lockfile=/var/lock/subsys/$prog

# Some functions to make the below more readable
POLICYD=/sbin/policyd
PID_FILE=/var/run/policyd.pid

runlevel=$(set -- $(runlevel); eval "echo \$$#" )

do_sanity_check()
{
	echo -n $"Checking policyd configuration:"
	$POLICYD -t >/dev/null 2>&1
	RETVAL=$?
	if [ $RETVAL -ne  0 ]; then
		failure $"Configuration sanity check failed"
		echo
	else
		success
	fi
}

start()
{
	[ -x $POLICYD ] || exit 5
	[ -f /etc/clockwork/policyd.conf ] || exit 6
	[ -d /etc/clockwork/ssl ] || exit 6
	[ -f /etc/clockwork/ssl/key.pem ] || exit 6

	echo -n $"Starting $prog: "
	$POLICYD $OPTIONS && success || failure
	RETVAL=$?
	[ $RETVAL -eq 0 ] && touch $lockfile
	echo
	return $RETVAL
}

stop()
{
	echo -n $"Stopping $prog: "
	if [ -n "`pidfileofproc $POLICYD`" ] ; then
		killproc $POLICYD
	else
		failure $"Stopping $prog"
	fi
	RETVAL=$?
	[ $RETVAL -eq 0 ] && rm -f $lockfile
	echo
}

reload()
{
	echo -n $"Reloading $prog: "
	if [ -n "`pidfileofproc $POLICYD`" ] ; then
		killproc $POLICYD -HUP
	else
		failure $"Reloading $prog"
	fi
	RETVAL=$?
	echo
}

restart() {
	stop
	start
}

force_reload() {
	restart
}

check_config() {
	do_sanity_check
	if [ $RETVAL -eq 0 ]; then
		echo
	else
		$POLICYD -t
		RETVAL=6
	fi
}

rh_status() {
	status -p $PID_FILE policyd
}

rh_status_q() {
	rh_status >/dev/null 2>&1
}

case "$1" in
	start)
		rh_status_q && exit 0
		do_sanity_check
		if [ $RETVAL -eq 0 ]; then
			start
		else
			RETVAL=6
		fi
		;;
	stop)
		if ! rh_status_q; then
			rm -f $lockfile
			exit 0
		fi
		stop
		;;
	restart)
		restart
		;;
	reload)
		rh_status_q || exit 7
		reload
		;;
	force-reload)
		force_reload
		;;
	condrestart|try-restart)
		rh_status_q || exit 0
		if [ -f $lockfile ] ; then
			do_sanity_check
			if [ $RETVAL -eq 0 ] ; then
				stop
				# avoid race
				sleep 3
				start
			else
				RETVAL=6
			fi
		fi
		;;
	status)
		rh_status
		RETVAL=$?
		if [ $RETVAL -eq 3 -a -f $lockfile ] ; then
			RETVAL=2
		fi
		;;
	check|check-config)
		check_config
		;;
	*)
		echo $"Usage: $0 {start|stop|restart|reload|force-reload|condrestart|status|check}"
		RETVAL=2
esac
exit $RETVAL

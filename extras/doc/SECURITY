Threat Assessment of Configuration Management Systems
-----------------------------------------------------

Before designing a security system and deciding on a set of cryptographic
controls to safeguard the integrity and confidentiality of a configuration
management system, we must first identify the probable and possible attacks
that would be mounted against such a system.  This threat assessment will
tell us specifically what the system needs to be able to defend against,
which in turn will point to a security model to use.

Duties of the System
--------------------

A configuration management system is responsible for maintaining the state
of a computer system by course-correcting non-compliant aspects.  These
aspects include installed software, file system permissions, service
configurations and more.  Generally speaking, the CMS takes the drudge work
out of system administration by constantly and flawlessly checking and fixing
issues found on systems in its jurisdiction.

Specifically, the CMS (as a whole) has four responsibilities:

 A. Maintain Compliance Policies for the Environment
 B. Distribute Compliance Policies to Systems in the Environment
 C. Enforce Compliance Policies on Systems in the Environment
 D. Report on Compliance Issues and Remediation stemming from enforcement

Probable Attacks
----------------

This section defines and explains threats that are technically feasible, and
have sufficient motive for an attacker to make attempt to carry them out.

 1. Information Leakage through Compliance Policies

 Compliance Policies often contain information that could assist an attacker
 in exploiting a system.  For example, an attacker may be able to learn what
 versions of common software packages should be installed on each server, and
 plan his attack accordingly.  Beyond that, user account information could
 lead an attacker down the path of social engineering, by providing details
 that only an 'insider' would know (like usernames, IDs, home directories, etc.)

 Therefore, all Policy Hosts must maintain confidentiality of Compliance Policy
 Definitions at all costs.  This includes both local filesystem precautions and
 transmission / distribution of policy data.

 2. Subversion of Compliance Policy Definitions

 An attacker wishing to gain access to servers managed by a CMS could easily
 do so by modifying Compliance Policies in a number of ways, including:

   a. Removal of server hardening policy objects, like firewall definitions
   b. Modification of system user parameters (i.e. add 'lp' to /etc/sudoers)
   c. Modification of software package configuration, potentially causing
        expoitable or vulnerable packages to be installed to increase the
        system's attack surface.
   d. and more...

 Because the CMS must operate at a very high privilege level to manage
 system objects like user accounts and file permissions, poorly-protected
 policy definitions can provide an attacker with a distributed automated
 tool for modifying virtually any aspect of one or more systems.

 3. Subversion of Compliance Policy Distribution

 An attacker with unlimited access to the network over which policies are
 distributed can wreak havoc with policy distribution.  This type of attack
 has varying degrees of subversion, each with a different level of impact:

   a. Denial of Service - An attacker could intercept all traffic from the
      client systems bound for policy hosts and "black-hole" it; effectively
      causing the client systems to believe that the policy host is unavailable
      to provide current policy data.

      The primary motivation behind this type of attack is to prevent the
      client system from self-healing by enforcing its Compliance Policy.

   b. Corruption of Service - Similar to Denial of Service, except that the
      attacker inserts arbitrary packets into the data stream that carries
      the policy from the policy host to the client system.  This will cause
      corrupt policy data on the client system.

      The motivation behind this type of attack is the same as the DoS vector;
      keep a client system from correcting its system configuration.

   c. Spoofing - By intercepting all policy distribution packets destined
      for a client system from the Policy Host, and replacing them with
      different packets, an attacker could essentially highjack a system by
      feeding it unsafe policy.  The impact of this attack is the same as the
      Subversion of Compliance Policy Definitions (vector 2.)

 4. Subversion of Reporting Data on Compliance Issues

 An attacker can also modify reporting data sent from client systems to the
 policy host, or block the transmission altogether.  This flavor of DoS would
 be useful to cover up an attack-in-progress on the client system.


Countermeasures
---------------

 1. Transmitted Message Integrity

    Prevents subversion of Policy in transit (vector 3b)

 2. Transmission Channel Confidentiality (+ Perfect Forward Secrecy)

    Prevents information leakage in transit (vector 1)

 3. Endpoint Authentication / Verification (Client and Server)

    Prevents information leakage in transit (vector 1)
    Prevents Policy Subversion through Spoofng (vector 3c)

 4. Policy Store Encryption and Filesystem Protection

    Prevents information leakage at rest (vector 1)
    Prevents subversion of Policy at rest (vector 2)

 5. Policy Change Authentication / Verification

    Prevents subversion of Policy at rest (vector 2)

 6. Process Memory Protection

    This countermeasure is intended to protect against subversion of other
    countermeasures.

"Unavoidable" Attack Vectors
----------------------------

  3a. Denial of Service of Policy Distribution

      These scenarios need to be investigated further to discover the prime
      motivating factors that would lead an attacker to DoS the CMS.  From there,
      the application can be designed to protect itself against these attacks.

/* opcodes.h - generated by gencode */

/** OPCODE CONSTANTS **/
#define OP_NOOP            0000  /* does nothing */
#define OP_PUSH            0x01  /* push a register onto data stack */
#define OP_POP             0x02  /* pop data stack top into a register */
#define OP_SET             0x03  /* set register value */
#define OP_SWAP            0x04  /* swap two register values */
#define OP_ACC             0x05  /* copy the accumulator value into a register */
#define OP_ADD             0x06  /* add the second operand to the first */
#define OP_SUB             0x07  /* subtract the second operand from the first */
#define OP_MULT            0x08  /* multiply the first operand by the second */
#define OP_DIV             0x09  /* divide the first operand by the second */
#define OP_MOD             0x0a  /* modulo the first operand by the second */
#define OP_CALL            0x0b  /* call a user-defined function */
#define OP_TRY             0x0c  /* call a user-defined function, as a die-return point */
#define OP_RET             0x0d  /* return to caller */
#define OP_BAIL            0x0e  /* return, unwinding the stack back to inner most try opcode */
#define OP_EQ              0x0f  /* compare two integers for equality */
#define OP_LT              0x10  /* check that operand 1 < operand 2 */
#define OP_LTE             0x11  /* check that operand 1 <= operand 2 */
#define OP_GT              0x12  /* check that operand 1 > operand 2 */
#define OP_GTE             0x13  /* check that operand 1 >= operand 2 */
#define OP_STREQ           0x14  /* compare two strings */
#define OP_JMP             0x15  /* unconditional jump */
#define OP_JZ              0x16  /* jump if accumulator is 0 */
#define OP_JNZ             0x17  /* jump if accumulator is not 0 */
#define OP_STRING          0x18  /* format a (heap-allocated) string */
#define OP_PRINT           0x19  /* print a message to standard output */
#define OP_ERROR           0x1a  /* print an error */
#define OP_PERROR          0x1b  /* print an error (with system error message) */
#define OP_SYSLOG          0x1c  /* log a message to syslog */
#define OP_FLAG            0x1d  /* set a flag in the runtime */
#define OP_UNFLAG          0x1e  /* unset a flag in the runtime */
#define OP_FLAGGED_P       0x1f  /* see if a flag is set in the runtime */
#define OP_FS_STAT         0x20  /* check to see if a file exists */
#define OP_FS_TYPE         0x21  /* return a string describing the type of file */
#define OP_FS_FILE_P       0x22  /* is a path a regular file? */
#define OP_FS_SYMLINK_P    0x23  /* is a path a symbolic link? */
#define OP_FS_DIR_P        0x24  /* is a path a directory? */
#define OP_FS_CHARDEV_P    0x25  /* is a path a character device? */
#define OP_FS_BLOCKDEV_P   0x26  /* is a path a block device? */
#define OP_FS_FIFO_P       0x27  /* is a path a FIFO queue? */
#define OP_FS_SOCKET_P     0x28  /* is a path a socket? */
#define OP_FS_READLINK     0x29  /* get the value of a symbolic link */
#define OP_FS_DEV          0x2a  /* get the ID of the device containing a file */
#define OP_FS_INODE        0x2b  /* get the inode of a file */
#define OP_FS_MODE         0x2c  /* get the mode (permissions) of a file */
#define OP_FS_NLINK        0x2d  /* get the number of hard links to a file */
#define OP_FS_UID          0x2e  /* get the UID of the file's owner */
#define OP_FS_GID          0x2f  /* get the GID of the file's group */
#define OP_FS_MAJOR        0x30  /* get the device major number (char/block devices only) */
#define OP_FS_MINOR        0x31  /* get the device minor number (char/block devices only) */
#define OP_FS_SIZE         0x32  /* get the size of a file */
#define OP_FS_ATIME        0x33  /* get the access time of a file */
#define OP_FS_MTIME        0x34  /* get the modification time of a file */
#define OP_FS_CTIME        0x35  /* get the inode change time of a file */
#define OP_FS_TOUCH        0x36  /* touch a file (create or update its utime) */
#define OP_FS_MKDIR        0x37  /* create a new (empty) directory */
#define OP_FS_LINK         0x38  /* create a file link */
#define OP_FS_SYMLINK      0x39  /* create a symbolic link */
#define OP_FS_UNLINK       0x3a  /* remove a file */
#define OP_FS_RMDIR        0x3b  /* remove an empty directory */
#define OP_FS_RENAME       0x3c  /* rename a file */
#define OP_FS_COPY         0x3d  /* copy a file from one name to another */
#define OP_FS_CHOWN        0x3e  /* change file ownership */
#define OP_FS_CHGRP        0x3f  /* change file group ownership */
#define OP_FS_CHMOD        0x40  /* change file permissions */
#define OP_FS_SHA1         0x41  /* calculate SHA1 of a file's contents */
#define OP_FS_GET          0x42  /* retrieve the contents of a local file */
#define OP_FS_PUT          0x43  /* update the contents of a local file */
#define OP_AUTHDB_OPEN     0x44  /* open the passwd/shadow (and group) databases for reading or writing */
#define OP_AUTHDB_SAVE     0x45  /* writes the passwd/shadow (and group) databases to disk */
#define OP_AUTHDB_CLOSE    0x46  /* closes the passwd/shadow (and group) databases, without writing them to disk */
#define OP_AUTHDB_NEXTUID  0x47  /* return the next available UID (> operand 1) into a register */
#define OP_AUTHDB_NEXTGID  0x48  /* return the next available GID (> operand 1) into a register */
#define OP_USER_FIND       0x49  /* find a user by username */
#define OP_USER_GET        0x4a  /* retrieve the value of an attribute from the last found user */
#define OP_USER_SET        0x4b  /* set an attribute on the last found user */
#define OP_USER_NEW        0x4c  /* allocate a new (unsaved) user object */
#define OP_USER_DELETE     0x4d  /* remove the current user from the (in-memory) database */
#define OP_GROUP_FIND      0x4e  /* find a group by name */
#define OP_GROUP_GET       0x4f  /* retrieve the value of an attribute from the last found group */
#define OP_GROUP_SET       0x50  /* set an attribute on the last found group */
#define OP_GROUP_NEW       0x51  /* allocate a new (unsaved) group object */
#define OP_GROUP_DELETE    0x52  /* remove the current group from the (in-memory) database */
#define OP_AUGEAS_INIT     0x53  /* initialize the augeas system */
#define OP_AUGEAS_DONE     0x54  /* de-initializes the augeas system */
#define OP_AUGEAS_PERROR   0x55  /* print a helpful augeas error message */
#define OP_AUGEAS_WRITE    0x56  /* write all pending changes to disk */
#define OP_AUGEAS_SET      0x57  /* set the value of a file/key */
#define OP_AUGEAS_GET      0x58  /* retrieve the value of a file/key */
#define OP_AUGEAS_FIND     0x59  /* search for and retrieve the value of file/key */
#define OP_AUGEAS_REMOVE   0x5a  /* remove a file/key */
#define OP_ENV_GET         0x5b  /* retrieve the value of an environment variable */
#define OP_ENV_SET         0x5c  /* set the value of an environment variable */
#define OP_ENV_UNSET       0x5d  /* unset an environment variable */
#define OP_LOCALSYS        0x5e  /* execute `cw localsys` with arguments */
#define OP_RUNAS_UID       0x5f  /* Set the run-as UID */
#define OP_RUNAS_GID       0x60  /* Set the run-as GID */
#define OP_EXEC            0x61  /* execute a command */
#define OP_DUMP            0x62  /* dump virtual machine state for debugging */
#define OP_HALT            0x63  /* halt the virtual machine */
#define OP_PRAGMA          0x64  /* set a compiler pragma */
#define OP_PROPERTY        0x65  /* retrieve a property into a register */
#define OP_ACL             0x66  /* store a mech ACL */
#define OP_SHOW_ACLS       0x67  /* print ACL entries */
#define OP_SHOW_ACL        0x68  /* print ACL entries that match the query */
#define OP_REMOTE_LIVE_P   0x69  /* Determine if we are connected to a clockd server */
#define OP_REMOTE_SHA1     0x6a  /* Retrieve the remote SHA1 based on a resource key */
#define OP_REMOTE_FILE     0x6b  /* Retrieve the contents of a file based on a resource key */


/** OPCODE MNEMONIC NAMES **/
static const char * OPCODES[] = {
	"noop",              /* OP_NOOP              0  0000 */
	"push",              /* OP_PUSH              1  0x01 */
	"pop",               /* OP_POP               2  0x02 */
	"set",               /* OP_SET               3  0x03 */
	"swap",              /* OP_SWAP              4  0x04 */
	"acc",               /* OP_ACC               5  0x05 */
	"add",               /* OP_ADD               6  0x06 */
	"sub",               /* OP_SUB               7  0x07 */
	"mult",              /* OP_MULT              8  0x08 */
	"div",               /* OP_DIV               9  0x09 */
	"mod",               /* OP_MOD              10  0x0a */
	"call",              /* OP_CALL             11  0x0b */
	"try",               /* OP_TRY              12  0x0c */
	"ret",               /* OP_RET              13  0x0d */
	"bail",              /* OP_BAIL             14  0x0e */
	"eq",                /* OP_EQ               15  0x0f */
	"lt",                /* OP_LT               16  0x10 */
	"lte",               /* OP_LTE              17  0x11 */
	"gt",                /* OP_GT               18  0x12 */
	"gte",               /* OP_GTE              19  0x13 */
	"streq",             /* OP_STREQ            20  0x14 */
	"jmp",               /* OP_JMP              21  0x15 */
	"jz",                /* OP_JZ               22  0x16 */
	"jnz",               /* OP_JNZ              23  0x17 */
	"string",            /* OP_STRING           24  0x18 */
	"print",             /* OP_PRINT            25  0x19 */
	"error",             /* OP_ERROR            26  0x1a */
	"perror",            /* OP_PERROR           27  0x1b */
	"syslog",            /* OP_SYSLOG           28  0x1c */
	"flag",              /* OP_FLAG             29  0x1d */
	"unflag",            /* OP_UNFLAG           30  0x1e */
	"flagged?",          /* OP_FLAGGED_P        31  0x1f */
	"fs.stat",           /* OP_FS_STAT          32  0x20 */
	"fs.type",           /* OP_FS_TYPE          33  0x21 */
	"fs.file?",          /* OP_FS_FILE_P        34  0x22 */
	"fs.symlink?",       /* OP_FS_SYMLINK_P     35  0x23 */
	"fs.dir?",           /* OP_FS_DIR_P         36  0x24 */
	"fs.chardev?",       /* OP_FS_CHARDEV_P     37  0x25 */
	"fs.blockdev?",      /* OP_FS_BLOCKDEV_P    38  0x26 */
	"fs.fifo?",          /* OP_FS_FIFO_P        39  0x27 */
	"fs.socket?",        /* OP_FS_SOCKET_P      40  0x28 */
	"fs.readlink",       /* OP_FS_READLINK      41  0x29 */
	"fs.dev",            /* OP_FS_DEV           42  0x2a */
	"fs.inode",          /* OP_FS_INODE         43  0x2b */
	"fs.mode",           /* OP_FS_MODE          44  0x2c */
	"fs.nlink",          /* OP_FS_NLINK         45  0x2d */
	"fs.uid",            /* OP_FS_UID           46  0x2e */
	"fs.gid",            /* OP_FS_GID           47  0x2f */
	"fs.major",          /* OP_FS_MAJOR         48  0x30 */
	"fs.minor",          /* OP_FS_MINOR         49  0x31 */
	"fs.size",           /* OP_FS_SIZE          50  0x32 */
	"fs.atime",          /* OP_FS_ATIME         51  0x33 */
	"fs.mtime",          /* OP_FS_MTIME         52  0x34 */
	"fs.ctime",          /* OP_FS_CTIME         53  0x35 */
	"fs.touch",          /* OP_FS_TOUCH         54  0x36 */
	"fs.mkdir",          /* OP_FS_MKDIR         55  0x37 */
	"fs.link",           /* OP_FS_LINK          56  0x38 */
	"fs.symlink",        /* OP_FS_SYMLINK       57  0x39 */
	"fs.unlink",         /* OP_FS_UNLINK        58  0x3a */
	"fs.rmdir",          /* OP_FS_RMDIR         59  0x3b */
	"fs.rename",         /* OP_FS_RENAME        60  0x3c */
	"fs.copy",           /* OP_FS_COPY          61  0x3d */
	"fs.chown",          /* OP_FS_CHOWN         62  0x3e */
	"fs.chgrp",          /* OP_FS_CHGRP         63  0x3f */
	"fs.chmod",          /* OP_FS_CHMOD         64  0x40 */
	"fs.sha1",           /* OP_FS_SHA1          65  0x41 */
	"fs.get",            /* OP_FS_GET           66  0x42 */
	"fs.put",            /* OP_FS_PUT           67  0x43 */
	"authdb.open",       /* OP_AUTHDB_OPEN      68  0x44 */
	"authdb.save",       /* OP_AUTHDB_SAVE      69  0x45 */
	"authdb.close",      /* OP_AUTHDB_CLOSE     70  0x46 */
	"authdb.nextuid",    /* OP_AUTHDB_NEXTUID   71  0x47 */
	"authdb.nextgid",    /* OP_AUTHDB_NEXTGID   72  0x48 */
	"user.find",         /* OP_USER_FIND        73  0x49 */
	"user.get",          /* OP_USER_GET         74  0x4a */
	"user.set",          /* OP_USER_SET         75  0x4b */
	"user.new",          /* OP_USER_NEW         76  0x4c */
	"user.delete",       /* OP_USER_DELETE      77  0x4d */
	"group.find",        /* OP_GROUP_FIND       78  0x4e */
	"group.get",         /* OP_GROUP_GET        79  0x4f */
	"group.set",         /* OP_GROUP_SET        80  0x50 */
	"group.new",         /* OP_GROUP_NEW        81  0x51 */
	"group.delete",      /* OP_GROUP_DELETE     82  0x52 */
	"augeas.init",       /* OP_AUGEAS_INIT      83  0x53 */
	"augeas.done",       /* OP_AUGEAS_DONE      84  0x54 */
	"augeas.perror",     /* OP_AUGEAS_PERROR    85  0x55 */
	"augeas.write",      /* OP_AUGEAS_WRITE     86  0x56 */
	"augeas.set",        /* OP_AUGEAS_SET       87  0x57 */
	"augeas.get",        /* OP_AUGEAS_GET       88  0x58 */
	"augeas.find",       /* OP_AUGEAS_FIND      89  0x59 */
	"augeas.remove",     /* OP_AUGEAS_REMOVE    90  0x5a */
	"env.get",           /* OP_ENV_GET          91  0x5b */
	"env.set",           /* OP_ENV_SET          92  0x5c */
	"env.unset",         /* OP_ENV_UNSET        93  0x5d */
	"localsys",          /* OP_LOCALSYS         94  0x5e */
	"runas.uid",         /* OP_RUNAS_UID        95  0x5f */
	"runas.gid",         /* OP_RUNAS_GID        96  0x60 */
	"exec",              /* OP_EXEC             97  0x61 */
	"dump",              /* OP_DUMP             98  0x62 */
	"halt",              /* OP_HALT             99  0x63 */
	"pragma",            /* OP_PRAGMA          100  0x64 */
	"property",          /* OP_PROPERTY        101  0x65 */
	"acl",               /* OP_ACL             102  0x66 */
	"show.acls",         /* OP_SHOW_ACLS       103  0x67 */
	"show.acl",          /* OP_SHOW_ACL        104  0x68 */
	"remote.live?",      /* OP_REMOTE_LIVE_P   105  0x69 */
	"remote.sha1",       /* OP_REMOTE_SHA1     106  0x6a */
	"remote.file",       /* OP_REMOTE_FILE     107  0x6b */
	NULL,
};


/** ASM TOKENS **/
#define T_OP_NOOP            0x40  /* does nothing */
#define T_OP_PUSH            0x41  /* push a register onto data stack */
#define T_OP_POP             0x42  /* pop data stack top into a register */
#define T_OP_SET             0x43  /* set register value */
#define T_OP_SWAP            0x44  /* swap two register values */
#define T_OP_ACC             0x45  /* copy the accumulator value into a register */
#define T_OP_ADD             0x46  /* add the second operand to the first */
#define T_OP_SUB             0x47  /* subtract the second operand from the first */
#define T_OP_MULT            0x48  /* multiply the first operand by the second */
#define T_OP_DIV             0x49  /* divide the first operand by the second */
#define T_OP_MOD             0x4a  /* modulo the first operand by the second */
#define T_OP_CALL            0x4b  /* call a user-defined function */
#define T_OP_TRY             0x4c  /* call a user-defined function, as a die-return point */
#define T_OP_RET             0x4d  /* return to caller */
#define T_OP_RETV            0x4e  /* return to caller (with value) */
#define T_OP_BAIL            0x4f  /* return, unwinding the stack back to inner most try opcode */
#define T_OP_EQ              0x50  /* compare two integers for equality */
#define T_OP_LT              0x51  /* check that operand 1 < operand 2 */
#define T_OP_LTE             0x52  /* check that operand 1 <= operand 2 */
#define T_OP_GT              0x53  /* check that operand 1 > operand 2 */
#define T_OP_GTE             0x54  /* check that operand 1 >= operand 2 */
#define T_OP_STREQ           0x55  /* compare two strings */
#define T_OP_JMP             0x56  /* unconditional jump */
#define T_OP_JZ              0x57  /* jump if accumulator is 0 */
#define T_OP_JNZ             0x58  /* jump if accumulator is not 0 */
#define T_OP_STRING          0x59  /* format a (heap-allocated) string */
#define T_OP_PRINT           0x5a  /* print a message to standard output */
#define T_OP_ERROR           0x5b  /* print an error */
#define T_OP_PERROR          0x5c  /* print an error (with system error message) */
#define T_OP_SYSLOG          0x5d  /* log a message to syslog */
#define T_OP_FLAG            0x5e  /* set a flag in the runtime */
#define T_OP_UNFLAG          0x5f  /* unset a flag in the runtime */
#define T_OP_FLAGGED_P       0x60  /* see if a flag is set in the runtime */
#define T_OP_FS_STAT         0x61  /* check to see if a file exists */
#define T_OP_FS_TYPE         0x62  /* return a string describing the type of file */
#define T_OP_FS_FILE_P       0x63  /* is a path a regular file? */
#define T_OP_FS_SYMLINK_P    0x64  /* is a path a symbolic link? */
#define T_OP_FS_DIR_P        0x65  /* is a path a directory? */
#define T_OP_FS_CHARDEV_P    0x66  /* is a path a character device? */
#define T_OP_FS_BLOCKDEV_P   0x67  /* is a path a block device? */
#define T_OP_FS_FIFO_P       0x68  /* is a path a FIFO queue? */
#define T_OP_FS_SOCKET_P     0x69  /* is a path a socket? */
#define T_OP_FS_READLINK     0x6a  /* get the value of a symbolic link */
#define T_OP_FS_DEV          0x6b  /* get the ID of the device containing a file */
#define T_OP_FS_INODE        0x6c  /* get the inode of a file */
#define T_OP_FS_MODE         0x6d  /* get the mode (permissions) of a file */
#define T_OP_FS_NLINK        0x6e  /* get the number of hard links to a file */
#define T_OP_FS_UID          0x6f  /* get the UID of the file's owner */
#define T_OP_FS_GID          0x70  /* get the GID of the file's group */
#define T_OP_FS_MAJOR        0x71  /* get the device major number (char/block devices only) */
#define T_OP_FS_MINOR        0x72  /* get the device minor number (char/block devices only) */
#define T_OP_FS_SIZE         0x73  /* get the size of a file */
#define T_OP_FS_ATIME        0x74  /* get the access time of a file */
#define T_OP_FS_MTIME        0x75  /* get the modification time of a file */
#define T_OP_FS_CTIME        0x76  /* get the inode change time of a file */
#define T_OP_FS_TOUCH        0x77  /* touch a file (create or update its utime) */
#define T_OP_FS_MKDIR        0x78  /* create a new (empty) directory */
#define T_OP_FS_LINK         0x79  /* create a file link */
#define T_OP_FS_SYMLINK      0x7a  /* create a symbolic link */
#define T_OP_FS_UNLINK       0x7b  /* remove a file */
#define T_OP_FS_RMDIR        0x7c  /* remove an empty directory */
#define T_OP_FS_RENAME       0x7d  /* rename a file */
#define T_OP_FS_COPY         0x7e  /* copy a file from one name to another */
#define T_OP_FS_CHOWN        0x7f  /* change file ownership */
#define T_OP_FS_CHGRP        0x80  /* change file group ownership */
#define T_OP_FS_CHMOD        0x81  /* change file permissions */
#define T_OP_FS_SHA1         0x82  /* calculate SHA1 of a file's contents */
#define T_OP_FS_GET          0x83  /* retrieve the contents of a local file */
#define T_OP_FS_PUT          0x84  /* update the contents of a local file */
#define T_OP_AUTHDB_OPEN     0x85  /* open the passwd/shadow (and group) databases for reading or writing */
#define T_OP_AUTHDB_SAVE     0x86  /* writes the passwd/shadow (and group) databases to disk */
#define T_OP_AUTHDB_CLOSE    0x87  /* closes the passwd/shadow (and group) databases, without writing them to disk */
#define T_OP_AUTHDB_NEXTUID  0x88  /* return the next available UID (> operand 1) into a register */
#define T_OP_AUTHDB_NEXTGID  0x89  /* return the next available GID (> operand 1) into a register */
#define T_OP_USER_FIND       0x8a  /* find a user by username */
#define T_OP_USER_GET        0x8b  /* retrieve the value of an attribute from the last found user */
#define T_OP_USER_SET        0x8c  /* set an attribute on the last found user */
#define T_OP_USER_NEW        0x8d  /* allocate a new (unsaved) user object */
#define T_OP_USER_DELETE     0x8e  /* remove the current user from the (in-memory) database */
#define T_OP_GROUP_FIND      0x8f  /* find a group by name */
#define T_OP_GROUP_GET       0x90  /* retrieve the value of an attribute from the last found group */
#define T_OP_GROUP_SET       0x91  /* set an attribute on the last found group */
#define T_OP_GROUP_NEW       0x92  /* allocate a new (unsaved) group object */
#define T_OP_GROUP_DELETE    0x93  /* remove the current group from the (in-memory) database */
#define T_OP_AUGEAS_INIT     0x94  /* initialize the augeas system */
#define T_OP_AUGEAS_DONE     0x95  /* de-initializes the augeas system */
#define T_OP_AUGEAS_PERROR   0x96  /* print a helpful augeas error message */
#define T_OP_AUGEAS_WRITE    0x97  /* write all pending changes to disk */
#define T_OP_AUGEAS_SET      0x98  /* set the value of a file/key */
#define T_OP_AUGEAS_GET      0x99  /* retrieve the value of a file/key */
#define T_OP_AUGEAS_FIND     0x9a  /* search for and retrieve the value of file/key */
#define T_OP_AUGEAS_REMOVE   0x9b  /* remove a file/key */
#define T_OP_ENV_GET         0x9c  /* retrieve the value of an environment variable */
#define T_OP_ENV_SET         0x9d  /* set the value of an environment variable */
#define T_OP_ENV_UNSET       0x9e  /* unset an environment variable */
#define T_OP_LOCALSYS        0x9f  /* execute `cw localsys` with arguments */
#define T_OP_RUNAS_UID       0xa0  /* Set the run-as UID */
#define T_OP_RUNAS_GID       0xa1  /* Set the run-as GID */
#define T_OP_EXEC            0xa2  /* execute a command */
#define T_OP_DUMP            0xa3  /* dump virtual machine state for debugging */
#define T_OP_HALT            0xa4  /* halt the virtual machine */
#define T_OP_PRAGMA          0xa5  /* set a compiler pragma */
#define T_OP_PROPERTY        0xa6  /* retrieve a property into a register */
#define T_OP_ACL             0xa7  /* store a mech ACL */
#define T_OP_SHOW_ACLS       0xa8  /* print ACL entries */
#define T_OP_SHOW_ACL        0xa9  /* print ACL entries that match the query */
#define T_OP_REMOTE_LIVE_P   0xaa  /* Determine if we are connected to a clockd server */
#define T_OP_REMOTE_SHA1     0xab  /* Retrieve the remote SHA1 based on a resource key */
#define T_OP_REMOTE_FILE     0xac  /* Retrieve the contents of a file based on a resource key */


static const char * ASM[] = {
	"noop",              /* T_OP_NOOP             0  0000 */
	"push",              /* T_OP_PUSH             1  0x01 */
	"pop",               /* T_OP_POP              2  0x02 */
	"set",               /* T_OP_SET              3  0x03 */
	"swap",              /* T_OP_SWAP             4  0x04 */
	"acc",               /* T_OP_ACC              5  0x05 */
	"add",               /* T_OP_ADD              6  0x06 */
	"sub",               /* T_OP_SUB              7  0x07 */
	"mult",              /* T_OP_MULT             8  0x08 */
	"div",               /* T_OP_DIV              9  0x09 */
	"mod",               /* T_OP_MOD             10  0x0a */
	"call",              /* T_OP_CALL            11  0x0b */
	"try",               /* T_OP_TRY             12  0x0c */
	"ret",               /* T_OP_RET             13  0x0d */
	"retv",              /* T_OP_RETV            14  0x0e */
	"bail",              /* T_OP_BAIL            15  0x0f */
	"eq",                /* T_OP_EQ              16  0x10 */
	"lt",                /* T_OP_LT              17  0x11 */
	"lte",               /* T_OP_LTE             18  0x12 */
	"gt",                /* T_OP_GT              19  0x13 */
	"gte",               /* T_OP_GTE             20  0x14 */
	"streq",             /* T_OP_STREQ           21  0x15 */
	"jmp",               /* T_OP_JMP             22  0x16 */
	"jz",                /* T_OP_JZ              23  0x17 */
	"jnz",               /* T_OP_JNZ             24  0x18 */
	"string",            /* T_OP_STRING          25  0x19 */
	"print",             /* T_OP_PRINT           26  0x1a */
	"error",             /* T_OP_ERROR           27  0x1b */
	"perror",            /* T_OP_PERROR          28  0x1c */
	"syslog",            /* T_OP_SYSLOG          29  0x1d */
	"flag",              /* T_OP_FLAG            30  0x1e */
	"unflag",            /* T_OP_UNFLAG          31  0x1f */
	"flagged?",          /* T_OP_FLAGGED_P       32  0x20 */
	"fs.stat",           /* T_OP_FS_STAT         33  0x21 */
	"fs.type",           /* T_OP_FS_TYPE         34  0x22 */
	"fs.file?",          /* T_OP_FS_FILE_P       35  0x23 */
	"fs.symlink?",       /* T_OP_FS_SYMLINK_P    36  0x24 */
	"fs.dir?",           /* T_OP_FS_DIR_P        37  0x25 */
	"fs.chardev?",       /* T_OP_FS_CHARDEV_P    38  0x26 */
	"fs.blockdev?",      /* T_OP_FS_BLOCKDEV_P   39  0x27 */
	"fs.fifo?",          /* T_OP_FS_FIFO_P       40  0x28 */
	"fs.socket?",        /* T_OP_FS_SOCKET_P     41  0x29 */
	"fs.readlink",       /* T_OP_FS_READLINK     42  0x2a */
	"fs.dev",            /* T_OP_FS_DEV          43  0x2b */
	"fs.inode",          /* T_OP_FS_INODE        44  0x2c */
	"fs.mode",           /* T_OP_FS_MODE         45  0x2d */
	"fs.nlink",          /* T_OP_FS_NLINK        46  0x2e */
	"fs.uid",            /* T_OP_FS_UID          47  0x2f */
	"fs.gid",            /* T_OP_FS_GID          48  0x30 */
	"fs.major",          /* T_OP_FS_MAJOR        49  0x31 */
	"fs.minor",          /* T_OP_FS_MINOR        50  0x32 */
	"fs.size",           /* T_OP_FS_SIZE         51  0x33 */
	"fs.atime",          /* T_OP_FS_ATIME        52  0x34 */
	"fs.mtime",          /* T_OP_FS_MTIME        53  0x35 */
	"fs.ctime",          /* T_OP_FS_CTIME        54  0x36 */
	"fs.touch",          /* T_OP_FS_TOUCH        55  0x37 */
	"fs.mkdir",          /* T_OP_FS_MKDIR        56  0x38 */
	"fs.link",           /* T_OP_FS_LINK         57  0x39 */
	"fs.symlink",        /* T_OP_FS_SYMLINK      58  0x3a */
	"fs.unlink",         /* T_OP_FS_UNLINK       59  0x3b */
	"fs.rmdir",          /* T_OP_FS_RMDIR        60  0x3c */
	"fs.rename",         /* T_OP_FS_RENAME       61  0x3d */
	"fs.copy",           /* T_OP_FS_COPY         62  0x3e */
	"fs.chown",          /* T_OP_FS_CHOWN        63  0x3f */
	"fs.chgrp",          /* T_OP_FS_CHGRP        64  0x40 */
	"fs.chmod",          /* T_OP_FS_CHMOD        65  0x41 */
	"fs.sha1",           /* T_OP_FS_SHA1         66  0x42 */
	"fs.get",            /* T_OP_FS_GET          67  0x43 */
	"fs.put",            /* T_OP_FS_PUT          68  0x44 */
	"authdb.open",       /* T_OP_AUTHDB_OPEN     69  0x45 */
	"authdb.save",       /* T_OP_AUTHDB_SAVE     70  0x46 */
	"authdb.close",      /* T_OP_AUTHDB_CLOSE    71  0x47 */
	"authdb.nextuid",    /* T_OP_AUTHDB_NEXTUID  72  0x48 */
	"authdb.nextgid",    /* T_OP_AUTHDB_NEXTGID  73  0x49 */
	"user.find",         /* T_OP_USER_FIND       74  0x4a */
	"user.get",          /* T_OP_USER_GET        75  0x4b */
	"user.set",          /* T_OP_USER_SET        76  0x4c */
	"user.new",          /* T_OP_USER_NEW        77  0x4d */
	"user.delete",       /* T_OP_USER_DELETE     78  0x4e */
	"group.find",        /* T_OP_GROUP_FIND      79  0x4f */
	"group.get",         /* T_OP_GROUP_GET       80  0x50 */
	"group.set",         /* T_OP_GROUP_SET       81  0x51 */
	"group.new",         /* T_OP_GROUP_NEW       82  0x52 */
	"group.delete",      /* T_OP_GROUP_DELETE    83  0x53 */
	"augeas.init",       /* T_OP_AUGEAS_INIT     84  0x54 */
	"augeas.done",       /* T_OP_AUGEAS_DONE     85  0x55 */
	"augeas.perror",     /* T_OP_AUGEAS_PERROR   86  0x56 */
	"augeas.write",      /* T_OP_AUGEAS_WRITE    87  0x57 */
	"augeas.set",        /* T_OP_AUGEAS_SET      88  0x58 */
	"augeas.get",        /* T_OP_AUGEAS_GET      89  0x59 */
	"augeas.find",       /* T_OP_AUGEAS_FIND     90  0x5a */
	"augeas.remove",     /* T_OP_AUGEAS_REMOVE   91  0x5b */
	"env.get",           /* T_OP_ENV_GET         92  0x5c */
	"env.set",           /* T_OP_ENV_SET         93  0x5d */
	"env.unset",         /* T_OP_ENV_UNSET       94  0x5e */
	"localsys",          /* T_OP_LOCALSYS        95  0x5f */
	"runas.uid",         /* T_OP_RUNAS_UID       96  0x60 */
	"runas.gid",         /* T_OP_RUNAS_GID       97  0x61 */
	"exec",              /* T_OP_EXEC            98  0x62 */
	"dump",              /* T_OP_DUMP            99  0x63 */
	"halt",              /* T_OP_HALT            100  0x64 */
	"pragma",            /* T_OP_PRAGMA          101  0x65 */
	"property",          /* T_OP_PROPERTY        102  0x66 */
	"acl",               /* T_OP_ACL             103  0x67 */
	"show.acls",         /* T_OP_SHOW_ACLS       104  0x68 */
	"show.acl",          /* T_OP_SHOW_ACL        105  0x69 */
	"remote.live?",      /* T_OP_REMOTE_LIVE_P   106  0x6a */
	"remote.sha1",       /* T_OP_REMOTE_SHA1     107  0x6b */
	"remote.file",       /* T_OP_REMOTE_FILE     108  0x6c */
	NULL,
};

#define ARG_NONE        0x00
#define ARG_REGISTER    0x01
#define ARG_NUMBER      0x02
#define ARG_STRING      0x04
#define ARG_LABEL       0x08
#define ARG_FUNCTION    0x10
#define ARG_IDENTIFIER  0x20

#define VALUE_NONE      0x0
#define VALUE_REGISTER  0x1
#define VALUE_NUMBER    0x2
#define VALUE_STRING    0x3
#define VALUE_ADDRESS   0x4
#define VALUE_LABEL     0x5
#define VALUE_FNLABEL   0x6
#define VALUE_OFFSET    0x7

#define TYPE_LITERAL   0x1
#define TYPE_REGISTER  0x2
#define TYPE_ADDRESS   0x3

static const char *ASM_TYPES[] = {
	"NONE",
	"register",
	"number",
	"string",
	"address",
	"label",
	"offset",
	"fnlabel",
	NULL,
};

static struct {
	byte_t      token;
	const char *usage;
	byte_t      opcode;
	byte_t      args[2];
} ASM_SYNTAX[] = {
	{ T_OP_NOOP,           "noop",                                           OP_NOOP,           { ARG_NONE,                           ARG_NONE,                           } },
	{ T_OP_PUSH,           "push %a",                                        OP_PUSH,           { ARG_REGISTER,                       ARG_NONE,                           } },
	{ T_OP_POP,            "pop %a",                                         OP_POP,            { ARG_REGISTER,                       ARG_NONE,                           } },
	{ T_OP_SET,            "set %a (%b|<string>|<number>)",                  OP_SET,            { ARG_REGISTER,                       ARG_REGISTER|ARG_STRING|ARG_NUMBER, } },
	{ T_OP_SWAP,           "swap %a %b",                                     OP_SWAP,           { ARG_REGISTER,                       ARG_REGISTER,                       } },
	{ T_OP_ACC,            "acc %a",                                         OP_ACC,            { ARG_REGISTER,                       ARG_NONE,                           } },
	{ T_OP_ADD,            "add %a (%b|<number>)",                           OP_ADD,            { ARG_REGISTER,                       ARG_REGISTER|ARG_NUMBER,            } },
	{ T_OP_SUB,            "sub %a (%b|<number>)",                           OP_SUB,            { ARG_REGISTER,                       ARG_REGISTER|ARG_NUMBER,            } },
	{ T_OP_MULT,           "mult %a (%b|<number>)",                          OP_MULT,           { ARG_REGISTER,                       ARG_REGISTER|ARG_NUMBER,            } },
	{ T_OP_DIV,            "div %a (%b|<number>)",                           OP_DIV,            { ARG_REGISTER,                       ARG_REGISTER|ARG_NUMBER,            } },
	{ T_OP_MOD,            "mod %a (%b|<number>)",                           OP_MOD,            { ARG_REGISTER,                       ARG_REGISTER|ARG_NUMBER,            } },
	{ T_OP_CALL,           "call <function>",                                OP_CALL,           { ARG_FUNCTION,                       ARG_NONE,                           } },
	{ T_OP_TRY,            "try <function>",                                 OP_TRY,            { ARG_FUNCTION,                       ARG_NONE,                           } },
	{ T_OP_RET,            "ret",                                            OP_RET,            { ARG_NONE,                           ARG_NONE,                           } },
	{ T_OP_RETV,           "retv (%a|<string>|<number>)",                    OP_RET,            { ARG_REGISTER|ARG_STRING|ARG_NUMBER, ARG_NONE,                           } },
	{ T_OP_BAIL,           "bail (%a|<number>)",                             OP_BAIL,           { ARG_REGISTER|ARG_NUMBER,            ARG_NONE,                           } },
	{ T_OP_EQ,             "eq (%a|<number>) (%b|<number>)",                 OP_EQ,             { ARG_REGISTER|ARG_NUMBER,            ARG_REGISTER|ARG_NUMBER,            } },
	{ T_OP_LT,             "lt (%a|<number>) (%b|<number>)",                 OP_LT,             { ARG_REGISTER|ARG_NUMBER,            ARG_REGISTER|ARG_NUMBER,            } },
	{ T_OP_LTE,            "lte (%a|<number>) (%b|<number>)",                OP_LTE,            { ARG_REGISTER|ARG_NUMBER,            ARG_REGISTER|ARG_NUMBER,            } },
	{ T_OP_GT,             "gt (%a|<number>) (%b|<number>)",                 OP_GT,             { ARG_REGISTER|ARG_NUMBER,            ARG_REGISTER|ARG_NUMBER,            } },
	{ T_OP_GTE,            "gte (%a|<number>) (%b|<number>)",                OP_GTE,            { ARG_REGISTER|ARG_NUMBER,            ARG_REGISTER|ARG_NUMBER,            } },
	{ T_OP_STREQ,          "streq (%a|<string>) (%b|<string>)",              OP_STREQ,          { ARG_REGISTER|ARG_STRING,            ARG_REGISTER|ARG_STRING,            } },
	{ T_OP_JMP,            "jmp <label>",                                    OP_JMP,            { ARG_LABEL,                          ARG_NONE,                           } },
	{ T_OP_JZ,             "jz <label>",                                     OP_JZ,             { ARG_LABEL,                          ARG_NONE,                           } },
	{ T_OP_JNZ,            "jnz <label>",                                    OP_JNZ,            { ARG_LABEL,                          ARG_NONE,                           } },
	{ T_OP_STRING,         "string (<string>|%a) %b",                        OP_STRING,         { ARG_STRING|ARG_REGISTER,            ARG_REGISTER,                       } },
	{ T_OP_PRINT,          "print (%a|<string>)",                            OP_PRINT,          { ARG_REGISTER|ARG_STRING,            ARG_NONE,                           } },
	{ T_OP_ERROR,          "error (%a|<string>)",                            OP_ERROR,          { ARG_REGISTER|ARG_STRING,            ARG_NONE,                           } },
	{ T_OP_PERROR,         "perror (%a|<string>)",                           OP_PERROR,         { ARG_REGISTER|ARG_STRING,            ARG_NONE,                           } },
	{ T_OP_SYSLOG,         "syslog (%a|identifier) (%b|<string>)",           OP_SYSLOG,         { ARG_REGISTER|ARG_IDENTIFIER,        ARG_REGISTER|ARG_STRING,            } },
	{ T_OP_FLAG,           "flag (%a|<string>)",                             OP_FLAG,           { ARG_REGISTER|ARG_STRING,            ARG_NONE,                           } },
	{ T_OP_UNFLAG,         "unflag (%a|<string>)",                           OP_UNFLAG,         { ARG_REGISTER|ARG_STRING,            ARG_NONE,                           } },
	{ T_OP_FLAGGED_P,      "flagged? (%a|<string>)",                         OP_FLAGGED_P,      { ARG_REGISTER|ARG_STRING,            ARG_NONE,                           } },
	{ T_OP_FS_STAT,        "fs.stat (%a|<string>)",                          OP_FS_STAT,        { ARG_REGISTER|ARG_STRING,            ARG_NONE,                           } },
	{ T_OP_FS_TYPE,        "fs.type (%a|<string>) %b",                       OP_FS_TYPE,        { ARG_REGISTER|ARG_STRING,            ARG_REGISTER,                       } },
	{ T_OP_FS_FILE_P,      "fs.file? (%a|<string>)",                         OP_FS_FILE_P,      { ARG_REGISTER|ARG_STRING,            ARG_NONE,                           } },
	{ T_OP_FS_SYMLINK_P,   "fs.symlink? (%a|<string>)",                      OP_FS_SYMLINK_P,   { ARG_REGISTER|ARG_STRING,            ARG_NONE,                           } },
	{ T_OP_FS_DIR_P,       "fs.dir? (%a|<string>)",                          OP_FS_DIR_P,       { ARG_REGISTER|ARG_STRING,            ARG_NONE,                           } },
	{ T_OP_FS_CHARDEV_P,   "fs.chardev? (%a|<string>)",                      OP_FS_CHARDEV_P,   { ARG_REGISTER|ARG_STRING,            ARG_NONE,                           } },
	{ T_OP_FS_BLOCKDEV_P,  "fs.blockdev? (%a|<string>)",                     OP_FS_BLOCKDEV_P,  { ARG_REGISTER|ARG_STRING,            ARG_NONE,                           } },
	{ T_OP_FS_FIFO_P,      "fs.fifo? (%a|<string>)",                         OP_FS_FIFO_P,      { ARG_REGISTER|ARG_STRING,            ARG_NONE,                           } },
	{ T_OP_FS_SOCKET_P,    "fs.socket? (%a|<string>)",                       OP_FS_SOCKET_P,    { ARG_REGISTER|ARG_STRING,            ARG_NONE,                           } },
	{ T_OP_FS_READLINK,    "fs.readlink (%a|<string>) %b",                   OP_FS_READLINK,    { ARG_REGISTER|ARG_STRING,            ARG_REGISTER,                       } },
	{ T_OP_FS_DEV,         "fs.dev (%a|<string>) %b",                        OP_FS_DEV,         { ARG_REGISTER|ARG_STRING,            ARG_REGISTER,                       } },
	{ T_OP_FS_INODE,       "fs.inode (%a|<string>) %b",                      OP_FS_INODE,       { ARG_REGISTER|ARG_STRING,            ARG_REGISTER,                       } },
	{ T_OP_FS_MODE,        "fs.mode (%a|<string>) %b",                       OP_FS_MODE,        { ARG_REGISTER|ARG_STRING,            ARG_REGISTER,                       } },
	{ T_OP_FS_NLINK,       "fs.nlink (%a|<string>) %b",                      OP_FS_NLINK,       { ARG_REGISTER|ARG_STRING,            ARG_REGISTER,                       } },
	{ T_OP_FS_UID,         "fs.uid (%a|<string>) %b",                        OP_FS_UID,         { ARG_REGISTER|ARG_STRING,            ARG_REGISTER,                       } },
	{ T_OP_FS_GID,         "fs.gid (%a|<string>) %b",                        OP_FS_GID,         { ARG_REGISTER|ARG_STRING,            ARG_REGISTER,                       } },
	{ T_OP_FS_MAJOR,       "fs.major (%a|<string>) %b",                      OP_FS_MAJOR,       { ARG_REGISTER|ARG_STRING,            ARG_REGISTER,                       } },
	{ T_OP_FS_MINOR,       "fs.minor (%a|<string>) %b",                      OP_FS_MINOR,       { ARG_REGISTER|ARG_STRING,            ARG_REGISTER,                       } },
	{ T_OP_FS_SIZE,        "fs.size (%a|<string>) %b",                       OP_FS_SIZE,        { ARG_REGISTER|ARG_STRING,            ARG_REGISTER,                       } },
	{ T_OP_FS_ATIME,       "fs.atime (%a|<string>) %b",                      OP_FS_ATIME,       { ARG_REGISTER|ARG_STRING,            ARG_REGISTER,                       } },
	{ T_OP_FS_MTIME,       "fs.mtime (%a|<string>) %b",                      OP_FS_MTIME,       { ARG_REGISTER|ARG_STRING,            ARG_REGISTER,                       } },
	{ T_OP_FS_CTIME,       "fs.ctime (%a|<string>) %b",                      OP_FS_CTIME,       { ARG_REGISTER|ARG_STRING,            ARG_REGISTER,                       } },
	{ T_OP_FS_TOUCH,       "fs.touch (%a|<string>)",                         OP_FS_TOUCH,       { ARG_REGISTER|ARG_STRING,            ARG_NONE,                           } },
	{ T_OP_FS_MKDIR,       "fs.mkdir (%a|<string>)",                         OP_FS_MKDIR,       { ARG_REGISTER|ARG_STRING,            ARG_NONE,                           } },
	{ T_OP_FS_LINK,        "fs.link (%a|<string>) (%b|<string>)",            OP_FS_LINK,        { ARG_REGISTER|ARG_STRING,            ARG_REGISTER|ARG_STRING,            } },
	{ T_OP_FS_SYMLINK,     "fs.symlink (%a|<string>) (%b|<string>)",         OP_FS_SYMLINK,     { ARG_REGISTER|ARG_STRING,            ARG_REGISTER|ARG_STRING,            } },
	{ T_OP_FS_UNLINK,      "fs.unlink (%a|<string>)",                        OP_FS_UNLINK,      { ARG_REGISTER|ARG_STRING,            ARG_NONE,                           } },
	{ T_OP_FS_RMDIR,       "fs.rmdir (%a|<string>)",                         OP_FS_RMDIR,       { ARG_REGISTER|ARG_STRING,            ARG_NONE,                           } },
	{ T_OP_FS_RENAME,      "fs.rename (%a|<string>) (%b|<string>)",          OP_FS_RENAME,      { ARG_REGISTER|ARG_STRING,            ARG_REGISTER|ARG_STRING,            } },
	{ T_OP_FS_COPY,        "fs.copy (%a|<string>) (%b|<string>)",            OP_FS_COPY,        { ARG_REGISTER|ARG_STRING,            ARG_REGISTER|ARG_STRING,            } },
	{ T_OP_FS_CHOWN,       "fs.chown (%a|<string>) (%b|<number>)",           OP_FS_CHOWN,       { ARG_REGISTER|ARG_STRING,            ARG_REGISTER|ARG_NUMBER,            } },
	{ T_OP_FS_CHGRP,       "fs.chgrp (%a|<string>) (%b|<number>)",           OP_FS_CHGRP,       { ARG_REGISTER|ARG_STRING,            ARG_REGISTER|ARG_NUMBER,            } },
	{ T_OP_FS_CHMOD,       "fs.chmod (%a|<string>) (%b|<number>)",           OP_FS_CHMOD,       { ARG_REGISTER|ARG_STRING,            ARG_REGISTER|ARG_NUMBER,            } },
	{ T_OP_FS_SHA1,        "fs.sha1 (%a|<string>) %b",                       OP_FS_SHA1,        { ARG_REGISTER|ARG_STRING,            ARG_REGISTER,                       } },
	{ T_OP_FS_GET,         "fs.get (%a|<string>) %b",                        OP_FS_GET,         { ARG_REGISTER|ARG_STRING,            ARG_REGISTER,                       } },
	{ T_OP_FS_PUT,         "fs.put (%a|<string>) (%b|<string>)",             OP_FS_PUT,         { ARG_REGISTER|ARG_STRING,            ARG_REGISTER|ARG_STRING,            } },
	{ T_OP_AUTHDB_OPEN,    "authdb.open",                                    OP_AUTHDB_OPEN,    { ARG_NONE,                           ARG_NONE,                           } },
	{ T_OP_AUTHDB_SAVE,    "authdb.save",                                    OP_AUTHDB_SAVE,    { ARG_NONE,                           ARG_NONE,                           } },
	{ T_OP_AUTHDB_CLOSE,   "authdb.close",                                   OP_AUTHDB_CLOSE,   { ARG_NONE,                           ARG_NONE,                           } },
	{ T_OP_AUTHDB_NEXTUID, "authdb.nextuid (%a|<number>) %b",                OP_AUTHDB_NEXTUID, { ARG_REGISTER|ARG_NUMBER,            ARG_REGISTER,                       } },
	{ T_OP_AUTHDB_NEXTGID, "authdb.nextgid (%a|<number>) %b",                OP_AUTHDB_NEXTGID, { ARG_REGISTER|ARG_NUMBER,            ARG_REGISTER,                       } },
	{ T_OP_USER_FIND,      "user.find (%a|<string>)",                        OP_USER_FIND,      { ARG_REGISTER|ARG_STRING,            ARG_NONE,                           } },
	{ T_OP_USER_GET,       "user.get (%a|<string>) (%b|<string>|<number>)",  OP_USER_GET,       { ARG_REGISTER|ARG_STRING,            ARG_REGISTER|ARG_STRING|ARG_NUMBER, } },
	{ T_OP_USER_SET,       "user.set (%a|<string>) (%b|<string>|<number>)",  OP_USER_SET,       { ARG_REGISTER|ARG_STRING,            ARG_REGISTER|ARG_STRING|ARG_NUMBER, } },
	{ T_OP_USER_NEW,       "user.new",                                       OP_USER_NEW,       { ARG_NONE,                           ARG_NONE,                           } },
	{ T_OP_USER_DELETE,    "user.delete",                                    OP_USER_DELETE,    { ARG_NONE,                           ARG_NONE,                           } },
	{ T_OP_GROUP_FIND,     "group.find (%a|<string>)",                       OP_GROUP_FIND,     { ARG_REGISTER|ARG_STRING,            ARG_NONE,                           } },
	{ T_OP_GROUP_GET,      "group.get (%a|<string>) (%b|<string>|<number>)", OP_GROUP_GET,      { ARG_REGISTER|ARG_STRING,            ARG_REGISTER|ARG_STRING|ARG_NUMBER, } },
	{ T_OP_GROUP_SET,      "group.set (%a|<string>) (%b|<string>|<number>)", OP_GROUP_SET,      { ARG_REGISTER|ARG_STRING,            ARG_REGISTER|ARG_STRING|ARG_NUMBER, } },
	{ T_OP_GROUP_NEW,      "group.new",                                      OP_GROUP_NEW,      { ARG_NONE,                           ARG_NONE,                           } },
	{ T_OP_GROUP_DELETE,   "group.delete",                                   OP_GROUP_DELETE,   { ARG_NONE,                           ARG_NONE,                           } },
	{ T_OP_AUGEAS_INIT,    "augeas.init",                                    OP_AUGEAS_INIT,    { ARG_NONE,                           ARG_NONE,                           } },
	{ T_OP_AUGEAS_DONE,    "augeas.done",                                    OP_AUGEAS_DONE,    { ARG_NONE,                           ARG_NONE,                           } },
	{ T_OP_AUGEAS_PERROR,  "augeas.perror (%a|<string>)",                    OP_AUGEAS_PERROR,  { ARG_REGISTER|ARG_STRING,            ARG_NONE,                           } },
	{ T_OP_AUGEAS_WRITE,   "augeas.write",                                   OP_AUGEAS_WRITE,   { ARG_NONE,                           ARG_NONE,                           } },
	{ T_OP_AUGEAS_SET,     "augeas.set (%a|<string>) (%b|<string>)",         OP_AUGEAS_SET,     { ARG_REGISTER|ARG_STRING,            ARG_REGISTER|ARG_STRING,            } },
	{ T_OP_AUGEAS_GET,     "augeas.get (%a|<string>) %b",                    OP_AUGEAS_GET,     { ARG_REGISTER|ARG_STRING,            ARG_REGISTER,                       } },
	{ T_OP_AUGEAS_FIND,    "augeas.find (%a|<string>) %b",                   OP_AUGEAS_FIND,    { ARG_REGISTER|ARG_STRING,            ARG_REGISTER,                       } },
	{ T_OP_AUGEAS_REMOVE,  "augeas.remove (%a|<string>)",                    OP_AUGEAS_REMOVE,  { ARG_REGISTER|ARG_STRING,            ARG_NONE,                           } },
	{ T_OP_ENV_GET,        "env.get (%a|<string>) %b",                       OP_ENV_GET,        { ARG_REGISTER|ARG_STRING,            ARG_REGISTER,                       } },
	{ T_OP_ENV_SET,        "env.set (%a|<string>) (%b|<string>)",            OP_ENV_SET,        { ARG_REGISTER|ARG_STRING,            ARG_REGISTER|ARG_STRING,            } },
	{ T_OP_ENV_UNSET,      "env.unset (%a|<string>)",                        OP_ENV_UNSET,      { ARG_REGISTER|ARG_STRING,            ARG_NONE,                           } },
	{ T_OP_LOCALSYS,       "localsys (%a|<string>) %b",                      OP_LOCALSYS,       { ARG_REGISTER|ARG_STRING,            ARG_REGISTER,                       } },
	{ T_OP_RUNAS_UID,      "runas.uid (%a|<number>)",                        OP_RUNAS_UID,      { ARG_REGISTER|ARG_NUMBER,            ARG_NONE,                           } },
	{ T_OP_RUNAS_GID,      "runas.gid (%a|<number>)",                        OP_RUNAS_GID,      { ARG_REGISTER|ARG_NUMBER,            ARG_NONE,                           } },
	{ T_OP_EXEC,           "exec (%a|<string>) %b",                          OP_EXEC,           { ARG_REGISTER|ARG_STRING,            ARG_REGISTER,                       } },
	{ T_OP_DUMP,           "dump",                                           OP_DUMP,           { ARG_NONE,                           ARG_NONE,                           } },
	{ T_OP_HALT,           "halt",                                           OP_HALT,           { ARG_NONE,                           ARG_NONE,                           } },
	{ T_OP_PRAGMA,         "pragma identifier (<string>|<number>)",          OP_PRAGMA,         { ARG_IDENTIFIER,                     ARG_STRING|ARG_NUMBER,              } },
	{ T_OP_PROPERTY,       "property (%a|<string>) %b",                      OP_PROPERTY,       { ARG_REGISTER|ARG_STRING,            ARG_REGISTER,                       } },
	{ T_OP_ACL,            "acl (%a|<string>)",                              OP_ACL,            { ARG_REGISTER|ARG_STRING,            ARG_NONE,                           } },
	{ T_OP_SHOW_ACLS,      "show.acls",                                      OP_SHOW_ACLS,      { ARG_NONE,                           ARG_NONE,                           } },
	{ T_OP_SHOW_ACL,       "show.acl (%a|<string>)",                         OP_SHOW_ACL,       { ARG_REGISTER|ARG_STRING,            ARG_NONE,                           } },
	{ T_OP_REMOTE_LIVE_P,  "remote.live?",                                   OP_REMOTE_LIVE_P,  { ARG_NONE,                           ARG_NONE,                           } },
	{ T_OP_REMOTE_SHA1,    "remote.sha1 (%a|<string>) %b",                   OP_REMOTE_SHA1,    { ARG_REGISTER|ARG_STRING,            ARG_REGISTER,                       } },
	{ T_OP_REMOTE_FILE,    "remote.file (%a|<string>) (%b|<string>)",        OP_REMOTE_FILE,    { ARG_REGISTER|ARG_STRING,            ARG_REGISTER|ARG_STRING,            } },
	{ 0, 0, 0, { 0, 0 } },
};

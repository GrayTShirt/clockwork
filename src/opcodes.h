/* opcodes.h - generated by gencode */

/** OPCODE CONSTANTS **/
#define NOOP            0000  /* does nothing */
#define PUSH            0x01  /* push a register onto data stack */
#define POP             0x02  /* pop data stack top into a register */
#define SET             0x03  /* set register value */
#define SWAP            0x04  /* swap two register values */
#define ADD             0x05  /* add the second operand to the first */
#define SUB             0x06  /* subtract the second operand from the first */
#define MULT            0x07  /* multiply the first operand by the second */
#define DIV             0x08  /* divide the first operand by the second */
#define MOD             0x09  /* modulo the first operand by the second */
#define CALL            0x0a  /* call a user-defined function */
#define RET             0x0b  /* return to caller */
#define CMP             0x0c  /* compare two integers */
#define STRCMP          0x0d  /* compare two strings */
#define JMP             0x0e  /* unconditional jump */
#define JZ              0x0f  /* jump if accumulator is 0 */
#define JNZ             0x10  /* jump if accumulator is not 0 */
#define JE              0x11  /* jump if accumulator is equal to first operand */
#define JNE             0x12  /* jump if accumulator is not equal to first operand */
#define JGT             0x13  /* jump if accumulator is greater than first operand */
#define JGTE            0x14  /* jump if accumulator is greater than or equal to first operand */
#define JLT             0x15  /* jump if accumulator is less than first operand */
#define JLTE            0x16  /* jump if accumulator is less than or equal to first operand */
#define STR             0x17  /* format a (heap-allocated) string */
#define ECHO            0x18  /* print a message to standard output */
#define ERR             0x19  /* print an error */
#define PERROR          0x1a  /* print an error (with system error message) */
#define BAIL            0x1b  /* ... */
#define MARK            0x1c  /* ... */
#define FS_STAT         0x1d  /* check to see if a file exists */
#define FS_FILE_P       0x1e  /* is a path a regular file? */
#define FS_SYMLINK_P    0x1f  /* is a path a symbolic link? */
#define FS_DIR_P        0x20  /* is a path a directory? */
#define FS_CHARDEV_P    0x21  /* is a path a character device? */
#define FS_BLOCKDEV_P   0x22  /* is a path a block device? */
#define FS_FIFO_P       0x23  /* is a path a FIFO queue? */
#define FS_SOCKET_P     0x24  /* is a path a socket? */
#define FS_READLINK     0x25  /* get the value of a symbolic link */
#define FS_DEV          0x26  /* get the ID of the device containing a file */
#define FS_INODE        0x27  /* get the inode of a file */
#define FS_MODE         0x28  /* get the mode (permissions) of a file */
#define FS_NLINK        0x29  /* get the number of hard links to a file */
#define FS_UID          0x2a  /* get the UID of the file's owner */
#define FS_GID          0x2b  /* get the GID of the file's group */
#define FS_MAJOR        0x2c  /* get the device major number (char/block devices only) */
#define FS_MINOR        0x2d  /* get the device minor number (char/block devices only) */
#define FS_SIZE         0x2e  /* get the size of a file */
#define FS_ATIME        0x2f  /* get the access time of a file */
#define FS_MTIME        0x30  /* get the modification time of a file */
#define FS_CTIME        0x31  /* get the inode change time of a file */
#define FS_TOUCH        0x32  /* touch a file (create or update its utime) */
#define FS_MKDIR        0x33  /* create a new (empty) directory */
#define FS_LINK         0x34  /* create a file link */
#define FS_SYMLINK      0x35  /* create a symbolic link */
#define FS_UNLINK       0x36  /* remove a file */
#define FS_RMDIR        0x37  /* remove an empty directory */
#define FS_RENAME       0x38  /* rename a file */
#define FS_COPY         0x39  /* copy a file from one name to another */
#define FS_CHOWN        0x3a  /* change file ownership */
#define FS_CHGRP        0x3b  /* change file group ownership */
#define FS_CHMOD        0x3c  /* change file permissions */
#define FS_SHA1         0x3d  /* calculate SHA1 of a file's contents */
#define FS_GET          0x3e  /* retrieve the contents of a local file */
#define FS_PUT          0x3f  /* update the contents of a local file */
#define GETFILE         0x40  /* retrieve a file from the server */
#define PASSWD_OPEN     0x41  /* open the passwd/shadow (and group) databases for reading or writing */
#define PASSWD_SAVE     0x42  /* writes the passwd/shadow (and group) databases to disk */
#define PASSWD_CLOSE    0x43  /* closes the passwd/shadow (and group) databases, without writing them to disk */
#define PASSWD_NEXTUID  0x44  /* return the next available UID into a register */
#define PASSWD_NEXTGID  0x45  /* return the next available GID into a register */
#define USER_FIND       0x46  /* find a user by username, storing the UID into a register */
#define USER_GET        0x47  /* retrieve the value of an attribute from the last found user */
#define USER_SET        0x48  /* set an attribute on the last found user */
#define USER_NEW        0x49  /* allocate a new (unsaved) user object */
#define USER_SAVE       0x4a  /* commit changes to the current user object (in-memory only) */
#define USER_DELETE     0x4b  /* remove the current user from the (in-memory) database */
#define GROUP_FIND      0x4c  /* find a group by name, storing the GID into a register */
#define GROUP_GET       0x4d  /* retrieve the value of an attribute from the last found group */
#define GROUP_SET       0x4e  /* set an attribute on the last found group */
#define GROUP_NEW       0x4f  /* allocate a new (unsaved) group object */
#define GROUP_SAVE      0x50  /* commit changes to the current group object (in-memory only) */
#define GROUP_DELETE    0x51  /* remove the current group from the (in-memory) database */
#define AUGEAS_INIT     0x52  /* initialize the augeas system */
#define AUGEAS_DONE     0x53  /* de-initializes the augeas system */
#define AUGEAS_ERR      0x54  /* print a helpful augeas error message */
#define AUGEAS_WRITE    0x55  /* write all pending changes to disk */
#define AUGEAS_SET      0x56  /* set the value of a file/key */
#define AUGEAS_GET      0x57  /* retrieve the value of a file/key */
#define AUGEAS_FIND     0x58  /* search for and retrieve the value of file/key */
#define AUGEAS_REMOVE   0x59  /* remove a file/key */
#define EXEC            0x5a  /* execute a command */
#define DUMP            0x5b  /* dump virtual machine state for debugging */
#define HALT            0x5c  /* halt the virtual machine */


#ifdef OPCODES_EXTENDED
/** OPCODE MNEMONIC NAMES **/
static const char * OPCODES[] = {
	"noop",           /* NOOP             0  0000 */
	"push",           /* PUSH             1  0x01 */
	"pop",            /* POP              2  0x02 */
	"set",            /* SET              3  0x03 */
	"swap",           /* SWAP             4  0x04 */
	"add",            /* ADD              5  0x05 */
	"sub",            /* SUB              6  0x06 */
	"mult",           /* MULT             7  0x07 */
	"div",            /* DIV              8  0x08 */
	"mod",            /* MOD              9  0x09 */
	"call",           /* CALL            10  0x0a */
	"ret",            /* RET             11  0x0b */
	"cmp",            /* CMP             12  0x0c */
	"strcmp",         /* STRCMP          13  0x0d */
	"jmp",            /* JMP             14  0x0e */
	"jz",             /* JZ              15  0x0f */
	"jnz",            /* JNZ             16  0x10 */
	"je",             /* JE              17  0x11 */
	"jne",            /* JNE             18  0x12 */
	"jgt",            /* JGT             19  0x13 */
	"jgte",           /* JGTE            20  0x14 */
	"jlt",            /* JLT             21  0x15 */
	"jlte",           /* JLTE            22  0x16 */
	"str",            /* STR             23  0x17 */
	"echo",           /* ECHO            24  0x18 */
	"err",            /* ERR             25  0x19 */
	"perror",         /* PERROR          26  0x1a */
	"bail",           /* BAIL            27  0x1b */
	"mark",           /* MARK            28  0x1c */
	"fs.stat",        /* FS_STAT         29  0x1d */
	"fs.file?",       /* FS_FILE_P       30  0x1e */
	"fs.symlink?",    /* FS_SYMLINK_P    31  0x1f */
	"fs.dir?",        /* FS_DIR_P        32  0x20 */
	"fs.chardev?",    /* FS_CHARDEV_P    33  0x21 */
	"fs.blockdev?",   /* FS_BLOCKDEV_P   34  0x22 */
	"fs.fifo?",       /* FS_FIFO_P       35  0x23 */
	"fs.socket?",     /* FS_SOCKET_P     36  0x24 */
	"fs.readlink",    /* FS_READLINK     37  0x25 */
	"fs.dev",         /* FS_DEV          38  0x26 */
	"fs.inode",       /* FS_INODE        39  0x27 */
	"fs.mode",        /* FS_MODE         40  0x28 */
	"fs.nlink",       /* FS_NLINK        41  0x29 */
	"fs.uid",         /* FS_UID          42  0x2a */
	"fs.gid",         /* FS_GID          43  0x2b */
	"fs.major",       /* FS_MAJOR        44  0x2c */
	"fs.minor",       /* FS_MINOR        45  0x2d */
	"fs.size",        /* FS_SIZE         46  0x2e */
	"fs.atime",       /* FS_ATIME        47  0x2f */
	"fs.mtime",       /* FS_MTIME        48  0x30 */
	"fs.ctime",       /* FS_CTIME        49  0x31 */
	"fs.touch",       /* FS_TOUCH        50  0x32 */
	"fs.mkdir",       /* FS_MKDIR        51  0x33 */
	"fs.link",        /* FS_LINK         52  0x34 */
	"fs.symlink",     /* FS_SYMLINK      53  0x35 */
	"fs.unlink",      /* FS_UNLINK       54  0x36 */
	"fs.rmdir",       /* FS_RMDIR        55  0x37 */
	"fs.rename",      /* FS_RENAME       56  0x38 */
	"fs.copy",        /* FS_COPY         57  0x39 */
	"fs.chown",       /* FS_CHOWN        58  0x3a */
	"fs.chgrp",       /* FS_CHGRP        59  0x3b */
	"fs.chmod",       /* FS_CHMOD        60  0x3c */
	"fs.sha1",        /* FS_SHA1         61  0x3d */
	"fs.get",         /* FS_GET          62  0x3e */
	"fs.put",         /* FS_PUT          63  0x3f */
	"getfile",        /* GETFILE         64  0x40 */
	"passwd.open",    /* PASSWD_OPEN     65  0x41 */
	"passwd.save",    /* PASSWD_SAVE     66  0x42 */
	"passwd.close",   /* PASSWD_CLOSE    67  0x43 */
	"passwd.nextuid", /* PASSWD_NEXTUID  68  0x44 */
	"passwd.nextgid", /* PASSWD_NEXTGID  69  0x45 */
	"user.find",      /* USER_FIND       70  0x46 */
	"user.get",       /* USER_GET        71  0x47 */
	"user.set",       /* USER_SET        72  0x48 */
	"user.new",       /* USER_NEW        73  0x49 */
	"user.save",      /* USER_SAVE       74  0x4a */
	"user.delete",    /* USER_DELETE     75  0x4b */
	"group.find",     /* GROUP_FIND      76  0x4c */
	"group.get",      /* GROUP_GET       77  0x4d */
	"group.set",      /* GROUP_SET       78  0x4e */
	"group.new",      /* GROUP_NEW       79  0x4f */
	"group.save",     /* GROUP_SAVE      80  0x50 */
	"group.delete",   /* GROUP_DELETE    81  0x51 */
	"augeas.init",    /* AUGEAS_INIT     82  0x52 */
	"augeas.done",    /* AUGEAS_DONE     83  0x53 */
	"augeas.err",     /* AUGEAS_ERR      84  0x54 */
	"augeas.write",   /* AUGEAS_WRITE    85  0x55 */
	"augeas.set",     /* AUGEAS_SET      86  0x56 */
	"augeas.get",     /* AUGEAS_GET      87  0x57 */
	"augeas.find",    /* AUGEAS_FIND     88  0x58 */
	"augeas.remove",  /* AUGEAS_REMOVE   89  0x59 */
	"exec",           /* EXEC            90  0x5a */
	"dump",           /* DUMP            91  0x5b */
	"halt",           /* HALT            92  0x5c */
	NULL,
};


/** ASM TOKENS **/
#define T_OPCODE_NOOP            0x40  /* does nothing */
#define T_OPCODE_PUSH            0x41  /* push a register onto data stack */
#define T_OPCODE_POP             0x42  /* pop data stack top into a register */
#define T_OPCODE_SET             0x43  /* set register value */
#define T_OPCODE_SWAP            0x44  /* swap two register values */
#define T_OPCODE_ADD             0x45  /* add the second operand to the first */
#define T_OPCODE_SUB             0x46  /* subtract the second operand from the first */
#define T_OPCODE_MULT            0x47  /* multiply the first operand by the second */
#define T_OPCODE_DIV             0x48  /* divide the first operand by the second */
#define T_OPCODE_MOD             0x49  /* modulo the first operand by the second */
#define T_OPCODE_CALL            0x4a  /* call a user-defined function */
#define T_OPCODE_RET             0x4b  /* return to caller */
#define T_OPCODE_RETV            0x4c  /* return to caller (with value) */
#define T_OPCODE_CMP             0x4d  /* compare two integers */
#define T_OPCODE_STRCMP          0x4e  /* compare two strings */
#define T_OPCODE_JMP             0x4f  /* unconditional jump */
#define T_OPCODE_JZ              0x50  /* jump if accumulator is 0 */
#define T_OPCODE_JNZ             0x51  /* jump if accumulator is not 0 */
#define T_OPCODE_JE              0x52  /* jump if accumulator is equal to first operand */
#define T_OPCODE_JNE             0x53  /* jump if accumulator is not equal to first operand */
#define T_OPCODE_JGT             0x54  /* jump if accumulator is greater than first operand */
#define T_OPCODE_JGTE            0x55  /* jump if accumulator is greater than or equal to first operand */
#define T_OPCODE_JLT             0x56  /* jump if accumulator is less than first operand */
#define T_OPCODE_JLTE            0x57  /* jump if accumulator is less than or equal to first operand */
#define T_OPCODE_STR             0x58  /* format a (heap-allocated) string */
#define T_OPCODE_ECHO            0x59  /* print a message to standard output */
#define T_OPCODE_ERR             0x5a  /* print an error */
#define T_OPCODE_PERROR          0x5b  /* print an error (with system error message) */
#define T_OPCODE_BAIL            0x5c  /* ... */
#define T_OPCODE_MARK            0x5d  /* ... */
#define T_OPCODE_FS_STAT         0x5e  /* check to see if a file exists */
#define T_OPCODE_FS_FILE_P       0x5f  /* is a path a regular file? */
#define T_OPCODE_FS_SYMLINK_P    0x60  /* is a path a symbolic link? */
#define T_OPCODE_FS_DIR_P        0x61  /* is a path a directory? */
#define T_OPCODE_FS_CHARDEV_P    0x62  /* is a path a character device? */
#define T_OPCODE_FS_BLOCKDEV_P   0x63  /* is a path a block device? */
#define T_OPCODE_FS_FIFO_P       0x64  /* is a path a FIFO queue? */
#define T_OPCODE_FS_SOCKET_P     0x65  /* is a path a socket? */
#define T_OPCODE_FS_READLINK     0x66  /* get the value of a symbolic link */
#define T_OPCODE_FS_DEV          0x67  /* get the ID of the device containing a file */
#define T_OPCODE_FS_INODE        0x68  /* get the inode of a file */
#define T_OPCODE_FS_MODE         0x69  /* get the mode (permissions) of a file */
#define T_OPCODE_FS_NLINK        0x6a  /* get the number of hard links to a file */
#define T_OPCODE_FS_UID          0x6b  /* get the UID of the file's owner */
#define T_OPCODE_FS_GID          0x6c  /* get the GID of the file's group */
#define T_OPCODE_FS_MAJOR        0x6d  /* get the device major number (char/block devices only) */
#define T_OPCODE_FS_MINOR        0x6e  /* get the device minor number (char/block devices only) */
#define T_OPCODE_FS_SIZE         0x6f  /* get the size of a file */
#define T_OPCODE_FS_ATIME        0x70  /* get the access time of a file */
#define T_OPCODE_FS_MTIME        0x71  /* get the modification time of a file */
#define T_OPCODE_FS_CTIME        0x72  /* get the inode change time of a file */
#define T_OPCODE_FS_TOUCH        0x73  /* touch a file (create or update its utime) */
#define T_OPCODE_FS_MKDIR        0x74  /* create a new (empty) directory */
#define T_OPCODE_FS_LINK         0x75  /* create a file link */
#define T_OPCODE_FS_SYMLINK      0x76  /* create a symbolic link */
#define T_OPCODE_FS_UNLINK       0x77  /* remove a file */
#define T_OPCODE_FS_RMDIR        0x78  /* remove an empty directory */
#define T_OPCODE_FS_RENAME       0x79  /* rename a file */
#define T_OPCODE_FS_COPY         0x7a  /* copy a file from one name to another */
#define T_OPCODE_FS_CHOWN        0x7b  /* change file ownership */
#define T_OPCODE_FS_CHGRP        0x7c  /* change file group ownership */
#define T_OPCODE_FS_CHMOD        0x7d  /* change file permissions */
#define T_OPCODE_FS_SHA1         0x7e  /* calculate SHA1 of a file's contents */
#define T_OPCODE_FS_GET          0x7f  /* retrieve the contents of a local file */
#define T_OPCODE_FS_PUT          0x80  /* update the contents of a local file */
#define T_OPCODE_GETFILE         0x81  /* retrieve a file from the server */
#define T_OPCODE_PASSWD_OPEN     0x82  /* open the passwd/shadow (and group) databases for reading or writing */
#define T_OPCODE_PASSWD_SAVE     0x83  /* writes the passwd/shadow (and group) databases to disk */
#define T_OPCODE_PASSWD_CLOSE    0x84  /* closes the passwd/shadow (and group) databases, without writing them to disk */
#define T_OPCODE_PASSWD_NEXTUID  0x85  /* return the next available UID into a register */
#define T_OPCODE_PASSWD_NEXTGID  0x86  /* return the next available GID into a register */
#define T_OPCODE_USER_FIND       0x87  /* find a user by username, storing the UID into a register */
#define T_OPCODE_USER_GET        0x88  /* retrieve the value of an attribute from the last found user */
#define T_OPCODE_USER_SET        0x89  /* set an attribute on the last found user */
#define T_OPCODE_USER_NEW        0x8a  /* allocate a new (unsaved) user object */
#define T_OPCODE_USER_SAVE       0x8b  /* commit changes to the current user object (in-memory only) */
#define T_OPCODE_USER_DELETE     0x8c  /* remove the current user from the (in-memory) database */
#define T_OPCODE_GROUP_FIND      0x8d  /* find a group by name, storing the GID into a register */
#define T_OPCODE_GROUP_GET       0x8e  /* retrieve the value of an attribute from the last found group */
#define T_OPCODE_GROUP_SET       0x8f  /* set an attribute on the last found group */
#define T_OPCODE_GROUP_NEW       0x90  /* allocate a new (unsaved) group object */
#define T_OPCODE_GROUP_SAVE      0x91  /* commit changes to the current group object (in-memory only) */
#define T_OPCODE_GROUP_DELETE    0x92  /* remove the current group from the (in-memory) database */
#define T_OPCODE_AUGEAS_INIT     0x93  /* initialize the augeas system */
#define T_OPCODE_AUGEAS_DONE     0x94  /* de-initializes the augeas system */
#define T_OPCODE_AUGEAS_ERR      0x95  /* print a helpful augeas error message */
#define T_OPCODE_AUGEAS_WRITE    0x96  /* write all pending changes to disk */
#define T_OPCODE_AUGEAS_SET      0x97  /* set the value of a file/key */
#define T_OPCODE_AUGEAS_GET      0x98  /* retrieve the value of a file/key */
#define T_OPCODE_AUGEAS_FIND     0x99  /* search for and retrieve the value of file/key */
#define T_OPCODE_AUGEAS_REMOVE   0x9a  /* remove a file/key */
#define T_OPCODE_EXEC            0x9b  /* execute a command */
#define T_OPCODE_DUMP            0x9c  /* dump virtual machine state for debugging */
#define T_OPCODE_HALT            0x9d  /* halt the virtual machine */


static const char * ASM[] = {
	"noop",           /* T_OPCODE_NOOP             0  0000 */
	"push",           /* T_OPCODE_PUSH             1  0x01 */
	"pop",            /* T_OPCODE_POP              2  0x02 */
	"set",            /* T_OPCODE_SET              3  0x03 */
	"swap",           /* T_OPCODE_SWAP             4  0x04 */
	"add",            /* T_OPCODE_ADD              5  0x05 */
	"sub",            /* T_OPCODE_SUB              6  0x06 */
	"mult",           /* T_OPCODE_MULT             7  0x07 */
	"div",            /* T_OPCODE_DIV              8  0x08 */
	"mod",            /* T_OPCODE_MOD              9  0x09 */
	"call",           /* T_OPCODE_CALL            10  0x0a */
	"ret",            /* T_OPCODE_RET             11  0x0b */
	"retv",           /* T_OPCODE_RETV            12  0x0c */
	"cmp",            /* T_OPCODE_CMP             13  0x0d */
	"strcmp",         /* T_OPCODE_STRCMP          14  0x0e */
	"jmp",            /* T_OPCODE_JMP             15  0x0f */
	"jz",             /* T_OPCODE_JZ              16  0x10 */
	"jnz",            /* T_OPCODE_JNZ             17  0x11 */
	"je",             /* T_OPCODE_JE              18  0x12 */
	"jne",            /* T_OPCODE_JNE             19  0x13 */
	"jgt",            /* T_OPCODE_JGT             20  0x14 */
	"jgte",           /* T_OPCODE_JGTE            21  0x15 */
	"jlt",            /* T_OPCODE_JLT             22  0x16 */
	"jlte",           /* T_OPCODE_JLTE            23  0x17 */
	"str",            /* T_OPCODE_STR             24  0x18 */
	"echo",           /* T_OPCODE_ECHO            25  0x19 */
	"err",            /* T_OPCODE_ERR             26  0x1a */
	"perror",         /* T_OPCODE_PERROR          27  0x1b */
	"bail",           /* T_OPCODE_BAIL            28  0x1c */
	"mark",           /* T_OPCODE_MARK            29  0x1d */
	"fs.stat",        /* T_OPCODE_FS_STAT         30  0x1e */
	"fs.file?",       /* T_OPCODE_FS_FILE_P       31  0x1f */
	"fs.symlink?",    /* T_OPCODE_FS_SYMLINK_P    32  0x20 */
	"fs.dir?",        /* T_OPCODE_FS_DIR_P        33  0x21 */
	"fs.chardev?",    /* T_OPCODE_FS_CHARDEV_P    34  0x22 */
	"fs.blockdev?",   /* T_OPCODE_FS_BLOCKDEV_P   35  0x23 */
	"fs.fifo?",       /* T_OPCODE_FS_FIFO_P       36  0x24 */
	"fs.socket?",     /* T_OPCODE_FS_SOCKET_P     37  0x25 */
	"fs.readlink",    /* T_OPCODE_FS_READLINK     38  0x26 */
	"fs.dev",         /* T_OPCODE_FS_DEV          39  0x27 */
	"fs.inode",       /* T_OPCODE_FS_INODE        40  0x28 */
	"fs.mode",        /* T_OPCODE_FS_MODE         41  0x29 */
	"fs.nlink",       /* T_OPCODE_FS_NLINK        42  0x2a */
	"fs.uid",         /* T_OPCODE_FS_UID          43  0x2b */
	"fs.gid",         /* T_OPCODE_FS_GID          44  0x2c */
	"fs.major",       /* T_OPCODE_FS_MAJOR        45  0x2d */
	"fs.minor",       /* T_OPCODE_FS_MINOR        46  0x2e */
	"fs.size",        /* T_OPCODE_FS_SIZE         47  0x2f */
	"fs.atime",       /* T_OPCODE_FS_ATIME        48  0x30 */
	"fs.mtime",       /* T_OPCODE_FS_MTIME        49  0x31 */
	"fs.ctime",       /* T_OPCODE_FS_CTIME        50  0x32 */
	"fs.touch",       /* T_OPCODE_FS_TOUCH        51  0x33 */
	"fs.mkdir",       /* T_OPCODE_FS_MKDIR        52  0x34 */
	"fs.link",        /* T_OPCODE_FS_LINK         53  0x35 */
	"fs.symlink",     /* T_OPCODE_FS_SYMLINK      54  0x36 */
	"fs.unlink",      /* T_OPCODE_FS_UNLINK       55  0x37 */
	"fs.rmdir",       /* T_OPCODE_FS_RMDIR        56  0x38 */
	"fs.rename",      /* T_OPCODE_FS_RENAME       57  0x39 */
	"fs.copy",        /* T_OPCODE_FS_COPY         58  0x3a */
	"fs.chown",       /* T_OPCODE_FS_CHOWN        59  0x3b */
	"fs.chgrp",       /* T_OPCODE_FS_CHGRP        60  0x3c */
	"fs.chmod",       /* T_OPCODE_FS_CHMOD        61  0x3d */
	"fs.sha1",        /* T_OPCODE_FS_SHA1         62  0x3e */
	"fs.get",         /* T_OPCODE_FS_GET          63  0x3f */
	"fs.put",         /* T_OPCODE_FS_PUT          64  0x40 */
	"getfile",        /* T_OPCODE_GETFILE         65  0x41 */
	"passwd.open",    /* T_OPCODE_PASSWD_OPEN     66  0x42 */
	"passwd.save",    /* T_OPCODE_PASSWD_SAVE     67  0x43 */
	"passwd.close",   /* T_OPCODE_PASSWD_CLOSE    68  0x44 */
	"passwd.nextuid", /* T_OPCODE_PASSWD_NEXTUID  69  0x45 */
	"passwd.nextgid", /* T_OPCODE_PASSWD_NEXTGID  70  0x46 */
	"user.find",      /* T_OPCODE_USER_FIND       71  0x47 */
	"user.get",       /* T_OPCODE_USER_GET        72  0x48 */
	"user.set",       /* T_OPCODE_USER_SET        73  0x49 */
	"user.new",       /* T_OPCODE_USER_NEW        74  0x4a */
	"user.save",      /* T_OPCODE_USER_SAVE       75  0x4b */
	"user.delete",    /* T_OPCODE_USER_DELETE     76  0x4c */
	"group.find",     /* T_OPCODE_GROUP_FIND      77  0x4d */
	"group.get",      /* T_OPCODE_GROUP_GET       78  0x4e */
	"group.set",      /* T_OPCODE_GROUP_SET       79  0x4f */
	"group.new",      /* T_OPCODE_GROUP_NEW       80  0x50 */
	"group.save",     /* T_OPCODE_GROUP_SAVE      81  0x51 */
	"group.delete",   /* T_OPCODE_GROUP_DELETE    82  0x52 */
	"augeas.init",    /* T_OPCODE_AUGEAS_INIT     83  0x53 */
	"augeas.done",    /* T_OPCODE_AUGEAS_DONE     84  0x54 */
	"augeas.err",     /* T_OPCODE_AUGEAS_ERR      85  0x55 */
	"augeas.write",   /* T_OPCODE_AUGEAS_WRITE    86  0x56 */
	"augeas.set",     /* T_OPCODE_AUGEAS_SET      87  0x57 */
	"augeas.get",     /* T_OPCODE_AUGEAS_GET      88  0x58 */
	"augeas.find",    /* T_OPCODE_AUGEAS_FIND     89  0x59 */
	"augeas.remove",  /* T_OPCODE_AUGEAS_REMOVE   90  0x5a */
	"exec",           /* T_OPCODE_EXEC            91  0x5b */
	"dump",           /* T_OPCODE_DUMP            92  0x5c */
	"halt",           /* T_OPCODE_HALT            93  0x5d */
	NULL,
};

#define ARG_NONE      0x00
#define ARG_REGISTER  0x01
#define ARG_NUMBER    0x02
#define ARG_STRING    0x04
#define ARG_LABEL     0x08
#define ARG_FUNCTION  0x10

static struct {
	byte_t      token;
	const char *usage;
	byte_t      opcode;
	byte_t      args[2];
} ASM_SYNTAX[] = {
	{ T_OPCODE_NOOP,           "noop",                                           NOOP,           { ARG_NONE,                           ARG_NONE,                           } },
	{ T_OPCODE_PUSH,           "push %a",                                        PUSH,           { ARG_REGISTER,                       ARG_NONE,                           } },
	{ T_OPCODE_POP,            "pop %a",                                         POP,            { ARG_REGISTER,                       ARG_NONE,                           } },
	{ T_OPCODE_SET,            "set %a (%b|<string>|<number>)",                  SET,            { ARG_REGISTER,                       ARG_REGISTER|ARG_STRING|ARG_NUMBER, } },
	{ T_OPCODE_SWAP,           "swap %a %b",                                     SWAP,           { ARG_REGISTER,                       ARG_REGISTER,                       } },
	{ T_OPCODE_ADD,            "add %a (%b|<number>)",                           ADD,            { ARG_REGISTER,                       ARG_REGISTER|ARG_NUMBER,            } },
	{ T_OPCODE_SUB,            "sub %a (%b|<number>)",                           SUB,            { ARG_REGISTER,                       ARG_REGISTER|ARG_NUMBER,            } },
	{ T_OPCODE_MULT,           "mult %a (%b|<number>)",                          MULT,           { ARG_REGISTER,                       ARG_REGISTER|ARG_NUMBER,            } },
	{ T_OPCODE_DIV,            "div %a (%b|<number>)",                           DIV,            { ARG_REGISTER,                       ARG_REGISTER|ARG_NUMBER,            } },
	{ T_OPCODE_MOD,            "mod %a (%b|<number>)",                           MOD,            { ARG_REGISTER,                       ARG_REGISTER|ARG_NUMBER,            } },
	{ T_OPCODE_CALL,           "call <function>",                                CALL,           { ARG_FUNCTION,                       ARG_NONE,                           } },
	{ T_OPCODE_RET,            "ret",                                            RET,            { ARG_NONE,                           ARG_NONE,                           } },
	{ T_OPCODE_RETV,           "retv (%a|<string>|<number>)",                    RET,            { ARG_REGISTER|ARG_STRING|ARG_NUMBER, ARG_NONE,                           } },
	{ T_OPCODE_CMP,            "cmp (%a|<number>) (%b|<number>)",                CMP,            { ARG_REGISTER|ARG_NUMBER,            ARG_REGISTER|ARG_NUMBER,            } },
	{ T_OPCODE_STRCMP,         "strcmp (%a|<string>) (%b|<string>)",             STRCMP,         { ARG_REGISTER|ARG_STRING,            ARG_REGISTER|ARG_STRING,            } },
	{ T_OPCODE_JMP,            "jmp <label>",                                    JMP,            { ARG_LABEL,                          ARG_NONE,                           } },
	{ T_OPCODE_JZ,             "jz <label>",                                     JZ,             { ARG_LABEL,                          ARG_NONE,                           } },
	{ T_OPCODE_JNZ,            "jnz <label>",                                    JNZ,            { ARG_LABEL,                          ARG_NONE,                           } },
	{ T_OPCODE_JE,             "je (%a|<number>) <label>",                       JE,             { ARG_REGISTER|ARG_NUMBER,            ARG_LABEL,                          } },
	{ T_OPCODE_JNE,            "jne (%a|<number>) <label>",                      JNE,            { ARG_REGISTER|ARG_NUMBER,            ARG_LABEL,                          } },
	{ T_OPCODE_JGT,            "jgt (%a|<number>) <label>",                      JGT,            { ARG_REGISTER|ARG_NUMBER,            ARG_LABEL,                          } },
	{ T_OPCODE_JGTE,           "jgte (%a|<number>) <label>",                     JGTE,           { ARG_REGISTER|ARG_NUMBER,            ARG_LABEL,                          } },
	{ T_OPCODE_JLT,            "jlt (%a|<number>) <label>",                      JLT,            { ARG_REGISTER|ARG_NUMBER,            ARG_LABEL,                          } },
	{ T_OPCODE_JLTE,           "jlte (%a|<number>) <label>",                     JLTE,           { ARG_REGISTER|ARG_NUMBER,            ARG_LABEL,                          } },
	{ T_OPCODE_STR,            "str (<string>|%a) %b",                           STR,            { ARG_STRING|ARG_REGISTER,            ARG_REGISTER,                       } },
	{ T_OPCODE_ECHO,           "echo <string>",                                  ECHO,           { ARG_STRING,                         ARG_NONE,                           } },
	{ T_OPCODE_ERR,            "err <string>",                                   ERR,            { ARG_STRING,                         ARG_NONE,                           } },
	{ T_OPCODE_PERROR,         "perror <string>",                                PERROR,         { ARG_STRING,                         ARG_NONE,                           } },
	{ T_OPCODE_BAIL,           "bail",                                           BAIL,           { ARG_NONE,                           ARG_NONE,                           } },
	{ T_OPCODE_MARK,           "mark",                                           MARK,           { ARG_NONE,                           ARG_NONE,                           } },
	{ T_OPCODE_FS_STAT,        "fs.stat (%a|<string>)",                          FS_STAT,        { ARG_REGISTER|ARG_STRING,            ARG_NONE,                           } },
	{ T_OPCODE_FS_FILE_P,      "fs.file? (%a|<string>)",                         FS_FILE_P,      { ARG_REGISTER|ARG_STRING,            ARG_NONE,                           } },
	{ T_OPCODE_FS_SYMLINK_P,   "fs.symlink? (%a|<string>)",                      FS_SYMLINK_P,   { ARG_REGISTER|ARG_STRING,            ARG_NONE,                           } },
	{ T_OPCODE_FS_DIR_P,       "fs.dir? (%a|<string>)",                          FS_DIR_P,       { ARG_REGISTER|ARG_STRING,            ARG_NONE,                           } },
	{ T_OPCODE_FS_CHARDEV_P,   "fs.chardev? (%a|<string>)",                      FS_CHARDEV_P,   { ARG_REGISTER|ARG_STRING,            ARG_NONE,                           } },
	{ T_OPCODE_FS_BLOCKDEV_P,  "fs.blockdev? (%a|<string>)",                     FS_BLOCKDEV_P,  { ARG_REGISTER|ARG_STRING,            ARG_NONE,                           } },
	{ T_OPCODE_FS_FIFO_P,      "fs.fifo? (%a|<string>)",                         FS_FIFO_P,      { ARG_REGISTER|ARG_STRING,            ARG_NONE,                           } },
	{ T_OPCODE_FS_SOCKET_P,    "fs.socket? (%a|<string>)",                       FS_SOCKET_P,    { ARG_REGISTER|ARG_STRING,            ARG_NONE,                           } },
	{ T_OPCODE_FS_READLINK,    "fs.readlink (%a|<string>) %b",                   FS_READLINK,    { ARG_REGISTER|ARG_STRING,            ARG_REGISTER,                       } },
	{ T_OPCODE_FS_DEV,         "fs.dev (%a|<string>) %b",                        FS_DEV,         { ARG_REGISTER|ARG_STRING,            ARG_REGISTER,                       } },
	{ T_OPCODE_FS_INODE,       "fs.inode (%a|<string>) %b",                      FS_INODE,       { ARG_REGISTER|ARG_STRING,            ARG_REGISTER,                       } },
	{ T_OPCODE_FS_MODE,        "fs.mode (%a|<string>) %b",                       FS_MODE,        { ARG_REGISTER|ARG_STRING,            ARG_REGISTER,                       } },
	{ T_OPCODE_FS_NLINK,       "fs.nlink (%a|<string>) %b",                      FS_NLINK,       { ARG_REGISTER|ARG_STRING,            ARG_REGISTER,                       } },
	{ T_OPCODE_FS_UID,         "fs.uid (%a|<string>) %b",                        FS_UID,         { ARG_REGISTER|ARG_STRING,            ARG_REGISTER,                       } },
	{ T_OPCODE_FS_GID,         "fs.gid (%a|<string>) %b",                        FS_GID,         { ARG_REGISTER|ARG_STRING,            ARG_REGISTER,                       } },
	{ T_OPCODE_FS_MAJOR,       "fs.major (%a|<string>) %b",                      FS_MAJOR,       { ARG_REGISTER|ARG_STRING,            ARG_REGISTER,                       } },
	{ T_OPCODE_FS_MINOR,       "fs.minor (%a|<string>) %b",                      FS_MINOR,       { ARG_REGISTER|ARG_STRING,            ARG_REGISTER,                       } },
	{ T_OPCODE_FS_SIZE,        "fs.size (%a|<string>) %b",                       FS_SIZE,        { ARG_REGISTER|ARG_STRING,            ARG_REGISTER,                       } },
	{ T_OPCODE_FS_ATIME,       "fs.atime (%a|<string>) %b",                      FS_ATIME,       { ARG_REGISTER|ARG_STRING,            ARG_REGISTER,                       } },
	{ T_OPCODE_FS_MTIME,       "fs.mtime (%a|<string>) %b",                      FS_MTIME,       { ARG_REGISTER|ARG_STRING,            ARG_REGISTER,                       } },
	{ T_OPCODE_FS_CTIME,       "fs.ctime (%a|<string>) %b",                      FS_CTIME,       { ARG_REGISTER|ARG_STRING,            ARG_REGISTER,                       } },
	{ T_OPCODE_FS_TOUCH,       "fs.touch (%a|<string>)",                         FS_TOUCH,       { ARG_REGISTER|ARG_STRING,            ARG_NONE,                           } },
	{ T_OPCODE_FS_MKDIR,       "fs.mkdir (%a|<string>)",                         FS_MKDIR,       { ARG_REGISTER|ARG_STRING,            ARG_NONE,                           } },
	{ T_OPCODE_FS_LINK,        "fs.link (%a|<string>) (%b|<string>)",            FS_LINK,        { ARG_REGISTER|ARG_STRING,            ARG_REGISTER|ARG_STRING,            } },
	{ T_OPCODE_FS_SYMLINK,     "fs.symlink (%a|<string>) (%b|<string>)",         FS_SYMLINK,     { ARG_REGISTER|ARG_STRING,            ARG_REGISTER|ARG_STRING,            } },
	{ T_OPCODE_FS_UNLINK,      "fs.unlink (%a|<string>)",                        FS_UNLINK,      { ARG_REGISTER|ARG_STRING,            ARG_NONE,                           } },
	{ T_OPCODE_FS_RMDIR,       "fs.rmdir (%a|<string>)",                         FS_RMDIR,       { ARG_REGISTER|ARG_STRING,            ARG_NONE,                           } },
	{ T_OPCODE_FS_RENAME,      "fs.rename (%a|<string>) (%b|<string>)",          FS_RENAME,      { ARG_REGISTER|ARG_STRING,            ARG_REGISTER|ARG_STRING,            } },
	{ T_OPCODE_FS_COPY,        "fs.copy (%a|<string>) (%b|<string>)",            FS_COPY,        { ARG_REGISTER|ARG_STRING,            ARG_REGISTER|ARG_STRING,            } },
	{ T_OPCODE_FS_CHOWN,       "fs.chown (%a|<string>) (%b|<number>)",           FS_CHOWN,       { ARG_REGISTER|ARG_STRING,            ARG_REGISTER|ARG_NUMBER,            } },
	{ T_OPCODE_FS_CHGRP,       "fs.chgrp (%a|<string>) (%b|<number>)",           FS_CHGRP,       { ARG_REGISTER|ARG_STRING,            ARG_REGISTER|ARG_NUMBER,            } },
	{ T_OPCODE_FS_CHMOD,       "fs.chmod (%a|<string>) (%b|<number>)",           FS_CHMOD,       { ARG_REGISTER|ARG_STRING,            ARG_REGISTER|ARG_NUMBER,            } },
	{ T_OPCODE_FS_SHA1,        "fs.sha1 (%a|<string>) %b",                       FS_SHA1,        { ARG_REGISTER|ARG_STRING,            ARG_REGISTER,                       } },
	{ T_OPCODE_FS_GET,         "fs.get (%a|<string>) %b",                        FS_GET,         { ARG_REGISTER|ARG_STRING,            ARG_REGISTER,                       } },
	{ T_OPCODE_FS_PUT,         "fs.put (%a|<string>) (%b|<string>)",             FS_PUT,         { ARG_REGISTER|ARG_STRING,            ARG_REGISTER|ARG_STRING,            } },
	{ T_OPCODE_GETFILE,        "getfile (%a|<string>) (%b|<string>)",            GETFILE,        { ARG_REGISTER|ARG_STRING,            ARG_REGISTER|ARG_STRING,            } },
	{ T_OPCODE_PASSWD_OPEN,    "passwd.open",                                    PASSWD_OPEN,    { ARG_NONE,                           ARG_NONE,                           } },
	{ T_OPCODE_PASSWD_SAVE,    "passwd.save",                                    PASSWD_SAVE,    { ARG_NONE,                           ARG_NONE,                           } },
	{ T_OPCODE_PASSWD_CLOSE,   "passwd.close",                                   PASSWD_CLOSE,   { ARG_NONE,                           ARG_NONE,                           } },
	{ T_OPCODE_PASSWD_NEXTUID, "passwd.nextuid %a",                              PASSWD_NEXTUID, { ARG_REGISTER,                       ARG_NONE,                           } },
	{ T_OPCODE_PASSWD_NEXTGID, "passwd.nextgid %a",                              PASSWD_NEXTGID, { ARG_REGISTER,                       ARG_NONE,                           } },
	{ T_OPCODE_USER_FIND,      "user.find (%a|<string>) %b",                     USER_FIND,      { ARG_REGISTER|ARG_STRING,            ARG_REGISTER,                       } },
	{ T_OPCODE_USER_GET,       "user.get (%a|<string>) (%b|<string>|<number>)",  USER_GET,       { ARG_REGISTER|ARG_STRING,            ARG_REGISTER|ARG_STRING|ARG_NUMBER, } },
	{ T_OPCODE_USER_SET,       "user.set (%a|<string>) (%b|<string>|<number>)",  USER_SET,       { ARG_REGISTER|ARG_STRING,            ARG_REGISTER|ARG_STRING|ARG_NUMBER, } },
	{ T_OPCODE_USER_NEW,       "user.new (%a|<number>) (%b|<string>)",           USER_NEW,       { ARG_REGISTER|ARG_NUMBER,            ARG_REGISTER|ARG_STRING,            } },
	{ T_OPCODE_USER_SAVE,      "user.save",                                      USER_SAVE,      { ARG_NONE,                           ARG_NONE,                           } },
	{ T_OPCODE_USER_DELETE,    "user.delete",                                    USER_DELETE,    { ARG_NONE,                           ARG_NONE,                           } },
	{ T_OPCODE_GROUP_FIND,     "group.find (%a|<string>) %b",                    GROUP_FIND,     { ARG_REGISTER|ARG_STRING,            ARG_REGISTER,                       } },
	{ T_OPCODE_GROUP_GET,      "group.get (%a|<string>) (%b|<string>|<number>)", GROUP_GET,      { ARG_REGISTER|ARG_STRING,            ARG_REGISTER|ARG_STRING|ARG_NUMBER, } },
	{ T_OPCODE_GROUP_SET,      "group.set (%a|<string>) (%b|<string>|<number>)", GROUP_SET,      { ARG_REGISTER|ARG_STRING,            ARG_REGISTER|ARG_STRING|ARG_NUMBER, } },
	{ T_OPCODE_GROUP_NEW,      "group.new (%a|<number>) (%b|<string>)",          GROUP_NEW,      { ARG_REGISTER|ARG_NUMBER,            ARG_REGISTER|ARG_STRING,            } },
	{ T_OPCODE_GROUP_SAVE,     "group.save",                                     GROUP_SAVE,     { ARG_NONE,                           ARG_NONE,                           } },
	{ T_OPCODE_GROUP_DELETE,   "group.delete",                                   GROUP_DELETE,   { ARG_NONE,                           ARG_NONE,                           } },
	{ T_OPCODE_AUGEAS_INIT,    "augeas.init",                                    AUGEAS_INIT,    { ARG_NONE,                           ARG_NONE,                           } },
	{ T_OPCODE_AUGEAS_DONE,    "augeas.done",                                    AUGEAS_DONE,    { ARG_NONE,                           ARG_NONE,                           } },
	{ T_OPCODE_AUGEAS_ERR,     "augeas.err",                                     AUGEAS_ERR,     { ARG_NONE,                           ARG_NONE,                           } },
	{ T_OPCODE_AUGEAS_WRITE,   "augeas.write",                                   AUGEAS_WRITE,   { ARG_NONE,                           ARG_NONE,                           } },
	{ T_OPCODE_AUGEAS_SET,     "augeas.set (%a|<string>) (%b|<string>)",         AUGEAS_SET,     { ARG_REGISTER|ARG_STRING,            ARG_REGISTER|ARG_STRING,            } },
	{ T_OPCODE_AUGEAS_GET,     "augeas.get (%a|<string>) %b",                    AUGEAS_GET,     { ARG_REGISTER|ARG_STRING,            ARG_REGISTER,                       } },
	{ T_OPCODE_AUGEAS_FIND,    "augeas.find (%a|<string>) %b",                   AUGEAS_FIND,    { ARG_REGISTER|ARG_STRING,            ARG_REGISTER,                       } },
	{ T_OPCODE_AUGEAS_REMOVE,  "augeas.remove (%a|<string>)",                    AUGEAS_REMOVE,  { ARG_REGISTER|ARG_STRING,            ARG_NONE,                           } },
	{ T_OPCODE_EXEC,           "exec (%a|<string>) %b",                          EXEC,           { ARG_REGISTER|ARG_STRING,            ARG_REGISTER,                       } },
	{ T_OPCODE_DUMP,           "dump",                                           DUMP,           { ARG_NONE,                           ARG_NONE,                           } },
	{ T_OPCODE_HALT,           "halt",                                           HALT,           { ARG_NONE,                           ARG_NONE,                           } },
	{ 0, 0, 0, { 0, 0 } },
};

#endif
